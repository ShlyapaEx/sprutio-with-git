// Generated by CoffeeScript 1.9.3
var BB,
  extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$.fn.serializeObject = function() {
  "use strict";
  var extend, result;
  result = {};
  extend = function(i, element) {
    var node;
    node = result[element.name];
    if ('undefined' !== typeof node && node !== null) {
      if ($.isArray(node)) {
        return node.push(element.value);
      } else {
        return result[element.name] = [node, element.value];
      }
    } else {
      return result[element.name] = element.value;
    }
  };
  $.each(this.serializeArray(), extend);
  return result;
};

BB = function() {};

BB.Widget = (function(superClass) {
  extend1(Widget, superClass);

  function Widget() {
    return Widget.__super__.constructor.apply(this, arguments);
  }

  Widget.prototype.render = function() {
    this.delegateEvents();
    return this;
  };

  Widget.prototype.initialize = function() {};

  return Widget;

})(Backbone.View);

BB.View = (function(superClass) {
  extend1(View, superClass);

  function View() {
    return View.__super__.constructor.apply(this, arguments);
  }

  View.prototype.initialize = function() {};

  return View;

})(BB.Widget);

BB.Events = _.extend({}, Backbone.Events);

BB.Events.KEY_ENTER = 13;

BB.Events.KEY_S = 83;

BB.Events.KEY_MAC_CMD_S = 19;

BB.Events.KEY_CTRL_S = function(e) {
  return !(!(e.which === BB.Events.KEY_S && e.ctrlKey) && !(e.which === BB.Events.KEY_MAC_CMD_S));
};

BB.Model = (function(superClass) {
  var methodToURL;

  extend1(Model, superClass);

  function Model() {
    return Model.__super__.constructor.apply(this, arguments);
  }

  methodToURL = {};

  Model.prototype.sync = function(method, model, options) {
    options = options || {};
    method = method.toLowerCase();
    options.type = 'POST';
    if (method === 'create') {
      options.url = model.methodToURL[method];
    } else {
      options.url = model.methodToURL[method] + model.get('id');
    }
    return Backbone.sync.apply(this, arguments);
  };

  Model.prototype.parse = function(response) {
    return response.data || {};
  };

  Model.prototype.initialize = function() {};

  return Model;

})(Backbone.Model);

BB.Device = (function() {
  function Device() {}

  Device.isMobile = function() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);
  };

  return Device;

})();

BB.Data = (function() {
  function Data() {}

  Data.Extend = function() {
    var args, argument, j, len;
    args = [true, {}];
    for (j = 0, len = arguments.length; j < len; j++) {
      argument = arguments[j];
      args.push(argument);
    }
    return $.extend.apply(this, args);
  };

  return Data;

})();

BB.Transport = (function() {
  function Transport() {}

  Transport.ajaxRequest = function(url, options) {
    var defaults;
    defaults = {
      dataType: 'json',
      type: 'POST',
      error: function() {}
    };
    options = _.extend(defaults, options || {});
    return $.ajax(url, options);
  };

  Transport.submitData = function(url, options) {
    var defaults, form, item;
    defaults = {
      data: {},
      method: 'POST',
      target: '_self'
    };
    options = _.extend(defaults, options || {});
    form = $('#_hidden_form');
    if (form.length > 0) {
      form.remove();
    }
    form = $('<form id="_hidden_form"></form>').attr('action', url).attr('method', options.method).attr('target', options.target).appendTo($('body'));
    for (item in options.data) {
      if (options.data.hasOwnProperty(item)) {
        $('<input>').attr('name', item).val(options.data[item]).appendTo(form);
      }
    }
    return form.submit();
  };

  return Transport;

})();

BB.Form = (function() {
  function Form() {}

  Form.renderErrorOutput = function(container, message, errors) {
    var error, errors_list, j, len, output;
    output = $('.output div.alert', container).html('');
    $('<h5></h5>').text(message).appendTo(output);
    if ((errors != null) && errors.length > 0) {
      errors_list = $('<ul></ul>');
      for (j = 0, len = errors.length; j < len; j++) {
        error = errors[j];
        $('<li></li>').text(error).appendTo(errors_list);
      }
      errors_list.appendTo(output);
      return $('.output', container).slideDown(100);
    }
  };

  Form.hideErrorOutput = function(container) {
    $('.output', container).slideUp(100);
    return $('.output div.alert', container).html('');
  };

  Form.beforeSubmit = function(container) {
    var elements;
    elements = $('[data-before-submit]', container);
    return elements.filter('.button, .btn').each(function() {
      var width;
      width = $(this).outerWidth();
      return $(this).css({
        'width': width + 'px'
      }).button('loading');
    });
  };

  Form.reloadCaptcha = function(container) {
    var $image, image, new_src;
    image = $(container).tagName === 'img' ? $(container) : $('img', $(container))[0];
    $image = $(image);
    new_src = $image.url().attr('path') + '/?' + Math.random();
    return $image.attr("src", new_src);
  };

  Form.resetForm = function(container) {
    var elements;
    elements = $('form', container);
    elements.each(function() {
      return $(this)[0].reset();
    });
    try {
      return $('select.selectpicker', container).selectpicker('render');
    } catch (_error) {

    }
  };

  Form.afterSubmit = function(container) {
    var elements;
    elements = $('[data-before-submit]', container);
    return elements.filter('.btn, .button').each(function() {
      return $(this).button('reset');
    });
  };

  Form.toObject = function(element, extra_data) {
    var fields, fields_data;
    extra_data = extra_data || {};
    fields = $('input[type=hidden], input[type=text], input[type=password], input[type=email], input[type=checkbox]:checked, input[type=radio]:checked, select, textarea', $(element)).not(':disabled');
    fields_data = $(fields).serializeObject();
    return _.extend(extra_data, fields_data);
  };

  return Form;

})();
