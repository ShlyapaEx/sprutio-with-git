// Generated by CoffeeScript 1.11.1
Ext.define('FM.action.Remove', {
  extend: 'FM.overrides.Action',
  requires: ['FM.view.windows.QuestionWindow', 'FM.view.windows.ProgressWindow'],
  config: {
    iconCls: "fm-action-remove",
    text: t("Remove"),
    buttonText: t("Remove [ Ctrl + 8 ]"),
    handler: function(panel, paths) {
      var question, session;
      FM.Logger.info('Run Action FM.action.Remove', arguments);
      session = Ext.ux.Util.clone(panel.session);
      question = Ext.create('FM.view.windows.QuestionWindow', {
        title: t("Delete files"),
        msg: t("Do you really want to remove all selected elements?"),
        yes: function() {
          var wait;
          FM.Logger.debug('yes handler()', arguments);
          wait = Ext.create('FM.view.windows.ProgressWindow', {
            cancelable: true,
            msg: t("Deleting files, please wait..."),
            cancel: function(wait_window, session, status) {
              FM.Logger.debug('cancel handler()', arguments);
              if (status != null) {
                return FM.Actions.Remove.cancel(wait_window, session, status);
              }
            }
          });
          wait.setSession(session);
          return FM.Actions.Remove.process(wait, session, paths);
        }
      });
      return question.show();
    }
  },
  process: function(progress_window, session, paths, status) {
    FM.Logger.debug('FM.action.Remove process() called = ', arguments);
    if (status != null) {
      if ((status.status != null) && (status.status === FM.Status.STATUS_RUNNING || status.status === FM.Status.STATUS_WAIT)) {
        return setTimeout((function(_this) {
          return function() {
            return FM.backend.ajaxSend('/actions/main/check_status', {
              params: {
                session: session,
                status: status
              },
              success: function(response) {
                var percent, text;
                status = Ext.util.JSON.decode(response.responseText).data;
                if ((status.progress != null) && ((status.progress.text != null) || (status.progress.percent != null))) {
                  text = status.progress.text != null ? status.progress.text : '';
                  percent = status.progress.percent != null ? status.progress.percent : 0;
                  progress_window.updateProgress(percent, text);
                } else {
                  progress_window.updateProgressText(t("Deleting files..."));
                }
                return _this.process(progress_window, session, paths, status);
              },
              failure: function(response) {
                FM.helpers.ShowError(t("Error during check operation status.<br/>Please contact Support."));
                return FM.Logger.error(response);
              }
            });
          };
        })(this), FM.Time.REQUEST_DELAY);
      } else {
        return FM.getApplication().fireEvent(FM.Events.file.removeFiles, status, session, progress_window);
      }
    } else {
      return FM.backend.ajaxSend('/actions/files/remove', {
        params: {
          session: session,
          paths: paths
        },
        success: (function(_this) {
          return function(response) {
            status = Ext.util.JSON.decode(response.responseText).data;
            progress_window.setOperationStatus(status);
            progress_window.show();
            return _this.process(progress_window, session, paths, status);
          };
        })(this),
        failure: (function(_this) {
          return function(response) {
            FM.helpers.ShowError(t("Error during removal operation start.<br/> Please contact Support."));
            return FM.Logger.error(response);
          };
        })(this)
      });
    }
  },
  cancel: function(progress_window, session, status) {
    return FM.backend.ajaxSend('/actions/main/cancel_operation', {
      params: {
        session: session,
        status: status
      },
      success: (function(_this) {
        return function() {
          return progress_window.close();
        };
      })(this),
      failure: (function(_this) {
        return function(response) {
          progress_window.close();
          FM.helpers.ShowError(t("Error during abortion of removal operation.<br/> Please contact Support."));
          return FM.Logger.error(response);
        };
      })(this)
    });
  }
});
