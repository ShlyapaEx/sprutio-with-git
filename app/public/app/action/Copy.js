// Generated by CoffeeScript 1.11.1
Ext.define('FM.action.Copy', {
  extend: 'FM.overrides.Action',
  requires: ['FM.view.windows.QuestionWindow', 'FM.view.windows.ProgressWindow'],
  config: {
    iconCls: "fm-action-copy",
    text: t("Copy"),
    buttonText: t("Copy [ Ctrl + 5 ]"),
    handler: function(panel, target_panel, target_path, records) {
      var paths, question, session, target_session;
      FM.Logger.info('Run Action FM.action.Copy', arguments);
      if ((records == null) || records.length === 0) {
        FM.helpers.ShowError(t("Please select file entry."));
        return;
      }
      session = Ext.ux.Util.clone(panel.session);
      target_session = Ext.ux.Util.clone(target_panel.session);
      target_session.path = target_path;
      paths = FM.helpers.GetAbsNames(session, records);
      question = Ext.create('FM.view.windows.QuestionWindow', {
        title: t("Copy"),
        msg: Ext.util.Format.format(t("Copy {0} items to {1}?"), paths.length, target_session.path),
        yes: function() {
          var file_path, file_paths, i, len, same_session;
          file_paths = FM.helpers.GetAbsNames(session, records);
          same_session = FM.helpers.IsSameSession(session, target_session);
          for (i = 0, len = file_paths.length; i < len; i++) {
            file_path = file_paths[i];
            if (target_session.path.indexOf(file_path, 0) !== -1 && same_session) {
              FM.helpers.ShowError(t("Cannot copy folder in its subfolder"));
              return;
            }
          }
          return FM.helpers.CheckOverwrite(target_panel, records, function(overwrite) {
            var wait;
            FM.Logger.debug('Yes handler()', session, paths);
            wait = Ext.create('FM.view.windows.ProgressWindow', {
              cancelable: true,
              msg: t("File copying, please wait..."),
              cancel: function(wait_window, session, status) {
                if (status != null) {
                  return FM.Actions.Copy.cancel(wait_window, session, status);
                }
              }
            });
            wait.setSession(session);
            wait.setTargetSession(target_session);
            return FM.Actions.Copy.process(wait, session, target_session, paths, overwrite);
          });
        }
      });
      return question.show();
    }
  },
  process: function(progress_window, session, target_session, paths, overwrite, status) {
    FM.Logger.debug('FM.action.Copy process() called = ', arguments);
    if (status != null) {
      if ((status.status != null) && (status.status === FM.Status.STATUS_RUNNING || status.status === FM.Status.STATUS_WAIT)) {
        return setTimeout((function(_this) {
          return function() {
            return FM.backend.ajaxSend('/actions/main/check_status', {
              params: {
                session: (session.type === FM.Session.FTP || session.type === FM.Session.SFTP) && target_session.type === FM.Session.HOME ? target_session : session,
                status: status
              },
              success: function(response) {
                var percent, text;
                status = Ext.util.JSON.decode(response.responseText).data;
                if ((status.progress != null) && ((status.progress.text != null) || (status.progress.percent != null))) {
                  text = status.progress.text != null ? status.progress.text : '';
                  percent = status.progress.percent != null ? status.progress.percent : 0;
                  progress_window.updateProgress(percent, text);
                } else {
                  progress_window.updateProgressText(t("Creating copy..."));
                }
                return _this.process(progress_window, session, target_session, paths, overwrite, status);
              },
              failure: function(response) {
                FM.helpers.ShowError(t("Error during check operation status.<br/>Please contact Support."));
                return FM.Logger.error(response);
              }
            });
          };
        })(this), FM.Time.REQUEST_DELAY);
      } else {
        return FM.getApplication().fireEvent(FM.Events.file.copyFiles, status, session, target_session, progress_window);
      }
    } else {
      return FM.backend.ajaxSend('/actions/files/copy', {
        params: {
          session: session,
          target: target_session,
          paths: paths,
          overwrite: overwrite
        },
        success: (function(_this) {
          return function(response) {
            status = Ext.util.JSON.decode(response.responseText).data;
            progress_window.setOperationStatus(status);
            progress_window.show();
            return _this.process(progress_window, session, target_session, paths, overwrite, status);
          };
        })(this),
        failure: (function(_this) {
          return function(response) {
            FM.helpers.ShowError(t("Error during copy operation start. Please contact Support."));
            return FM.Logger.error(response);
          };
        })(this)
      });
    }
  },
  cancel: function(progress_window, session, status) {
    return FM.backend.ajaxSend('/actions/main/cancel_operation', {
      params: {
        session: session,
        status: status
      },
      success: (function(_this) {
        return function(response) {
          var response_data;
          response_data = Ext.util.JSON.decode(response.responseText).data;
          FM.Logger.info(response_data);
          return progress_window.close();
        };
      })(this),
      failure: (function(_this) {
        return function(response) {
          progress_window.close();
          FM.helpers.ShowError(t("Error during copy operation aborting. Please contact Support."));
          return FM.Logger.error(response);
        };
      })(this)
    });
  }
});
