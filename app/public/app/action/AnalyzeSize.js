// Generated by CoffeeScript 1.11.1
Ext.define('FM.action.AnalyzeSize', {
  extend: 'FM.overrides.Action',
  requires: ['FM.view.windows.AnalyzeSizeWindow'],
  config: {
    scale: "large",
    iconAlign: "top",
    iconCls: "fm-action-analyze-size",
    text: t("Analyze Size"),
    handler: function(panel, path) {
      var bottom_toolbar, session, win;
      if (panel == null) {
        panel = FM.Active;
      }
      if (path == null) {
        path = FM.Active.session.path;
      }
      FM.Logger.info('Run Action FM.action.AnalyzeSize', arguments);
      bottom_toolbar = Ext.ComponentQuery.query("bottom-panel")[0].getDockedItems("toolbar[dock='top']")[0];
      session = Ext.ux.Util.clone(panel.session);
      FM.Logger.debug('session is', session, panel);
      win = Ext.create("FM.view.windows.AnalyzeSizeWindow", {
        taskBar: bottom_toolbar
      });
      win.setPath(path);
      win.setSession(session);
      win.show();
      return FM.Actions.AnalyzeSize.process(win, session);
    }
  },
  process: function(chart_window, session, status) {
    var files_chart, files_list;
    FM.Logger.debug('FM.action.AnalyzeSize process() called = ', arguments);
    files_list = Ext.ComponentQuery.query("file-size-list", chart_window)[0];
    files_chart = Ext.ComponentQuery.query("file-size-chart", chart_window)[0];
    if (status != null) {
      if ((status.status != null) && (status.status === FM.Status.STATUS_RUNNING || status.status === FM.Status.STATUS_WAIT)) {
        return setTimeout((function(_this) {
          return function() {
            return FM.backend.ajaxSend('/actions/main/check_status', {
              params: {
                session: session,
                status: status
              },
              success: function(response) {
                status = Ext.util.JSON.decode(response.responseText).data;
                return _this.process(chart_window, session, status);
              },
              failure: function(response) {
                FM.helpers.UnsetLoading(files_list.body);
                FM.helpers.UnsetLoading(files_chart);
                FM.helpers.ShowError(t("Error during check operation status.<br/>Please contact Support."));
                return FM.Logger.error(response);
              }
            });
          };
        })(this), FM.Time.REQUEST_DELAY);
      } else {
        return FM.getApplication().fireEvent(FM.Events.file.analyzeSize, status, session, chart_window);
      }
    } else {
      FM.helpers.SetLoading(files_list.body, t("Retrieve folders and files size..."));
      FM.helpers.SetLoading(files_chart, t("Retrieve folders and files size..."));
      return FM.backend.ajaxSend('/actions/files/analyze_size', {
        params: {
          session: session,
          path: chart_window.getPath()
        },
        success: (function(_this) {
          return function(response) {
            status = Ext.util.JSON.decode(response.responseText).data;
            chart_window.setOperationStatus(status);
            return _this.process(chart_window, session, status);
          };
        })(this),
        failure: (function(_this) {
          return function(response) {
            FM.helpers.UnsetLoading(files_list.body);
            FM.helpers.UnsetLoading(files_chart);
            FM.Logger.debug(response);
            FM.helpers.ShowError(t("Error during size analysis operation start.<br/>Please contact Support."));
            return FM.Logger.error(response);
          };
        })(this)
      });
    }
  }
});
