// Generated by CoffeeScript 1.11.1
Ext.define('FM.action.IPBlock', {
  extend: 'FM.overrides.Action',
  requires: ['FM.view.windows.IPBlockWindow'],
  config: {
    iconCls: "fm-action-ip-block",
    text: t("Block Access by IP address"),
    handler: function(panel) {
      var bottom_toolbar, session, wait;
      FM.Logger.info('Run Action FM.action.IPBlock', arguments);
      bottom_toolbar = Ext.ComponentQuery.query("bottom-panel")[0].getDockedItems("toolbar[dock='top']")[0];
      session = Ext.ux.Util.clone(panel.session);
      wait = Ext.create('FM.view.windows.ProgressWindow', {
        cancelable: false,
        msg: t("Retrieving settings, please wait...")
      });
      wait.show();
      return FM.backend.ajaxSend('/actions/htaccess/read_rules', {
        params: {
          session: session,
          path: session.path
        },
        success: (function(_this) {
          return function(response) {
            var response_data, win;
            response_data = Ext.util.JSON.decode(response.responseText).data;
            wait.close();
            win = Ext.create("FM.view.windows.IPBlockWindow", {
              taskBar: bottom_toolbar,
              save: function(button, ip_window, e, params) {
                button.disable();
                FM.Logger.debug('save handler()', arguments);
                return FM.backend.ajaxSend('/actions/htaccess/save_rules', {
                  params: {
                    session: session,
                    path: session.path,
                    params: params
                  },
                  success: (function(_this) {
                    return function(response) {
                      button.enable();
                      response_data = Ext.util.JSON.decode(response.responseText).data;
                      ip_window.setRules(response_data);
                      return FM.helpers.ApplySession(session, function(panel) {
                        panel.filelist.clearListCache();
                        if (panel.session.path === session.path) {
                          return FM.Actions.Refresh.execute([panel]);
                        }
                      });
                    };
                  })(this),
                  failure: (function(_this) {
                    return function(response) {
                      FM.helpers.ShowError(t("Error during saving ip rules.<br/> Please contact Support."));
                      button.enable();
                      return FM.Logger.error(response);
                    };
                  })(this)
                });
              }
            });
            win.setSession(session);
            win.setRules(response_data);
            return win.show();
          };
        })(this),
        failure: (function(_this) {
          return function(response) {
            wait.close();
            FM.helpers.ShowError(t("Error during retrieving ip block settings.<br/> Please contact Support."));
            return FM.Logger.error(response);
          };
        })(this)
      });
    }
  }
});
