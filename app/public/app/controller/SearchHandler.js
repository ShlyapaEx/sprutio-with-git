// Generated by CoffeeScript 1.11.1
Ext.define('FM.controller.SearchHandler', {
  extend: 'Ext.app.Controller',
  views: [],
  init: function() {
    FM.Logger.log('SearchHandler init!');
    return this.listen({
      controller: {
        '*': {
          eventSearchFindFiles: 'findFiles',
          eventSearchFindText: 'findText'
        }
      }
    });
  },
  onLaunch: function() {},
  findFiles: function(status, session, search_window, files_list) {
    var e;
    FM.Logger.log('Event findFiles run in SearchHandler! data = ', arguments);
    search_window.cancel_btn.setVisible(false);
    search_window.search_btn.setVisible(true);
    if ((status.status != null) && (status.status === FM.Status.STATUS_SUCCESS || status.status === FM.Status.STATUS_ABORT)) {
      if (status.status === FM.Status.STATUS_ABORT) {
        FM.Logger.info('findFiles Operation Aborted', status);
      } else {
        FM.Logger.info('Operation success', status);
      }
      try {
        files_list.setFileList(status.data);
      } catch (error1) {
        e = error1;
        FM.Logger.info('Exception updating filelist, skip');
      }
      return FM.helpers.UnsetLoading(files_list);
    } else if ((status.status != null) && status.status === FM.Status.STATUS_ERROR) {
      FM.helpers.UnsetLoading(files_list);
      FM.Logger.info('Operation error', status);
      FM.helpers.ShowError(t("Error during operation. Please contact Support."));
    } else {
      FM.helpers.UnsetLoading(files_list);
      FM.helpers.ShowError(t("Unknown operation status. Please contact Support."));
    }
  },
  findText: function(status, session, search_window, files_list) {
    var e, error;
    FM.Logger.debug('Event findText run in SearchHandler! data = ', arguments);
    search_window.cancel_btn.setVisible(false);
    search_window.search_btn.setVisible(true);
    if ((status.status != null) && (status.status === FM.Status.STATUS_SUCCESS || status.status === FM.Status.STATUS_ABORT)) {
      if (status.status === FM.Status.STATUS_ABORT) {
        FM.Logger.info('findText Operation Aborted', status);
      } else {
        FM.Logger.info('findText Operation success', status);
      }
      try {
        files_list.setFileList(status.data);
      } catch (error1) {
        e = error1;
        FM.Logger.info('Exception updating filelist, skip');
      }
      return FM.helpers.UnsetLoading(files_list);
    } else if ((status.status != null) && status.status === FM.Status.STATUS_ERROR) {
      FM.helpers.UnsetLoading(files_list);
      error = t("Error during operation. Please contact Support.");
      if ((status.data != null) && (status.data.message != null)) {
        error = FM.helpers.ParseErrorMessage(status.data.message, error);
      }
      FM.Logger.info('Operation error', status);
      FM.helpers.ShowError(error);
    } else {
      FM.helpers.UnsetLoading(files_list);
      FM.helpers.ShowError(t("Unknown operation status. Please contact Support."));
    }
  }
});
