// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.toolbars.ViewerTopToolbar', {
  extend: 'Ext.toolbar.Toolbar',
  alias: 'widget.viewer-top-toolbar',
  cls: 'fm-viewer-top-toolbar',
  items: [],
  initComponent: function() {
    FM.Logger.log('FM.view.toolbars.ViewerTopToolbar');
    this.items = [];
    this.items.push({
      text: t("File"),
      menu: [
        {
          text: t("Exit"),
          handler: (function(_this) {
            return function() {
              return _this.ownerCt.exit();
            };
          })(this)
        }
      ]
    });
    this.items.push({
      text: t("Encoding"),
      cls: 'button-menu-encoding',
      menu: {
        items: Ext.Array.map(FM.Viewer.getEncodings(), (function(_this) {
          return function(enc) {
            return {
              text: enc,
              checked: false,
              handler: function(item) {
                _this.ownerCt.changeEncoding(item.text);
                return item.ownerCt.hide();
              }
            };
          };
        })(this))
      }
    });
    this.items.push({
      text: t("Syntax"),
      cls: 'button-menu-syntax',
      menu: {
        items: Ext.Array.map(FM.Viewer.getModes(), (function(_this) {
          return function(mode) {
            return {
              text: mode,
              checked: false,
              handler: function(item) {
                _this.ownerCt.changeSyntax(item.text);
                return item.ownerCt.hide();
              }
            };
          };
        })(this))
      }
    });
    this.items.push("->");
    this.items.push({
      text: t("Search"),
      handler: (function(_this) {
        return function() {
          _this.ownerCt.editor.execCommand('find');
          return setTimeout(function() {
            if (_this.ownerCt.editor.searchBox != null) {
              $('input.ace_search_field', _this.ownerCt.editor.searchBox.searchBox).attr('placeholder', t("Search for"));
              $('[action=findAll]', _this.ownerCt.editor.searchBox.searchBox).text(t("All"));
              $('input.ace_search_field', _this.ownerCt.editor.searchBox.replaceBox).attr('placeholder', t("Replace with"));
              $('[action=replaceAndFindNext]', _this.ownerCt.editor.searchBox.replaceBox).text(t("Replace"));
              $('[action=replaceAll]', _this.ownerCt.editor.searchBox.replaceBox).text(t("All"));
              $('[action=toggleRegexpMode]', _this.ownerCt.editor.searchBox.searchOptions).attr("title", t("RegExp Search"));
              $('[action=toggleCaseSensitive]', _this.ownerCt.editor.searchBox.searchOptions).attr("title", t("CaseSensitive Search"));
              return $('[action=toggleWholeWords]', _this.ownerCt.editor.searchBox.searchOptions).attr("title", t("Whole Word Search"));
            }
          }, 100);
        };
      })(this)
    });
    this.items.push("-");
    this.items.push({
      text: t("Settings"),
      handler: function() {
        return FM.Actions.Settings.execute();
      }
    });
    return this.callParent(arguments);
  }
});
