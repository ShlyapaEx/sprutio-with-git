// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.ViewerWindow', {
  extend: 'Ext.ux.window.Window',
  requires: ['Ext.ux.aceeditor.Panel', 'FM.view.toolbars.ViewerTopToolbar', 'FM.view.toolbars.ViewerBottomToolbar'],
  alias: 'widget.viewer-window',
  cls: 'fm-viewer-window',
  layout: "fit",
  constrain: true,
  animate: true,
  maximizable: true,
  border: false,
  width: 700,
  height: 400,
  margin: 0,
  viewerMode: "text",
  tbar: {
    xtype: 'viewer-top-toolbar'
  },
  bbar: {
    xtype: 'viewer-bottom-toolbar'
  },
  initComponent: function() {
    var editor;
    FM.Logger.debug('FM.view.windows.ViewerWindow initComponent() called', arguments);
    this.viewerMode = FM.Viewer.getMode(this.fileRecord);
    editor = Ext.create("Ext.ux.aceeditor.Panel", {
      sourceCode: this.fileContent,
      parser: this.viewerMode,
      listeners: {
        editorcreated: (function(_this) {
          return function(editor_panel) {
            _this.initEditor(editor_panel.editor);
            return _this.updateSettings();
          };
        })(this)
      }
    });
    this.items = [editor];
    return this.callParent(arguments);
  },
  setSession: function(session) {
    return this.session = session;
  },
  getSession: function() {
    return this.session;
  },
  hasSession: function() {
    if (this.session != null) {
      return true;
    } else {
      return false;
    }
  },
  exit: function() {
    FM.Logger.debug('FM.view.windows.ViewerWindow exit() called', arguments);
    return this.close();
  },
  changeSyntax: function(syntax) {
    FM.Logger.debug('FM.view.windows.ViewerWindow changeSyntax() called', arguments);
    this.viewerMode = syntax;
    this.updateToolbar();
    return this.updateSettings();
  },
  changeEncoding: function(encoding) {
    FM.Logger.debug('FM.view.windows.ViewerWindow changeEncoding() called', arguments);
    FM.helpers.SetLoading(this.body, t("Applying settings..."));
    return FM.backend.ajaxSend('/actions/files/read', {
      params: {
        session: this.getSession(),
        path: FM.helpers.GetAbsName(this.getSession(), this.fileRecord),
        encoding: encoding
      },
      success: (function(_this) {
        return function(response) {
          var response_data;
          response_data = Ext.util.JSON.decode(response.responseText).data;
          FM.helpers.UnsetLoading(_this.body);
          _this.fileContent = response_data.content;
          _this.editor.setValue(_this.fileContent);
          _this.fileEncoding = encoding;
          _this.updateToolbar();
          return _this.updateSettings();
        };
      })(this),
      failure: (function(_this) {
        return function(response) {
          var error, json_response;
          FM.helpers.UnsetLoading(_this.body);
          json_response = Ext.util.JSON.decode(response.responseText);
          error = FM.helpers.ParseErrorMessage(json_response.message, t("Error during reading file.<br/> Please contact Support."));
          FM.helpers.ShowError(error);
          return FM.Logger.error(response);
        };
      })(this)
    });
  },
  initEditor: function(ace_editor) {
    var all, loaded, percent;
    FM.Logger.debug('FM.view.windows.ViewerWindow initEditor() called', arguments);
    this.editor = ace_editor;
    this.editor.setReadOnly(true);
    this.editor_mode = Ext.ComponentQuery.query('tbtext[cls=fm-viewer-mode]', this)[0];
    this.editor_encoding = Ext.ComponentQuery.query('tbtext[cls=fm-viewer-encoding]', this)[0];
    this.editor_size = Ext.ComponentQuery.query('tbtext[cls=fm-viewer-size]', this)[0];
    this.editor_status = Ext.ComponentQuery.query('tbtext[cls=fm-viewer-status]', this)[0];
    this.editor_position = Ext.ComponentQuery.query('tbtext[cls=fm-viewer-position]', this)[0];
    this.editor_mode.setText(Ext.util.Format.format(t("Mode: {0}"), this.viewerMode));
    this.editor_encoding.setText(this.fileEncoding);
    all = this.fileRecord.get("size");
    loaded = this.fileRecord.get("size");
    percent = (loaded / all).toFixed(2) * 100;
    this.editor_size.setText(Ext.util.Format.format(t("Loaded {0}% : {1} of {2} bytes"), percent, loaded, all));
    return this.editor.selection.on("changeCursor", (function(_this) {
      return function() {
        var c;
        c = _this.editor.selection.getCursor();
        return _this.editor_position.setText((c.row + 1) + " : " + c.column);
      };
    })(this));
  },
  updateToolbar: function() {
    var all, c, encoding_menu, loaded, percent, syntax_menu;
    FM.Logger.debug('FM.view.windows.EditorWindow updateToolbar() called', arguments);
    this.editor_mode.setText(Ext.util.Format.format(t("Mode: {0}"), this.viewerMode));
    this.editor_encoding.setText(this.fileEncoding);
    all = this.fileRecord.get("size");
    loaded = this.fileRecord.get("size");
    percent = (loaded / all).toFixed(2) * 100;
    this.editor_size.setText(Ext.util.Format.format(t("Loaded {0}% : {1} of {2} bytes"), percent, loaded, all));
    c = this.editor.selection.getCursor();
    this.editor_position.setText((c.row + 1) + " : " + c.column);
    syntax_menu = Ext.ComponentQuery.query('button[cls=button-menu-syntax]', this)[0].getMenu();
    syntax_menu.items.each(function(item) {
      if (item.text !== this.viewerMode) {
        return item.setChecked(false);
      } else {
        return item.setChecked(true);
      }
    }, this);
    encoding_menu = Ext.ComponentQuery.query('button[cls=button-menu-encoding]', this)[0].getMenu();
    return encoding_menu.items.each(function(item) {
      if (item.text !== this.fileEncoding) {
        return item.setChecked(false);
      } else {
        return item.setChecked(true);
      }
    }, this);
  },
  updateSettings: function() {
    FM.helpers.SetLoading(this.body, t("Applying settings..."));
    if (FM.Viewer.settings.print_margin_size != null) {
      this.editor.setPrintMarginColumn(FM.Viewer.settings.print_margin_size);
    }
    if (FM.Viewer.settings.font_size != null) {
      this.editor.setFontSize(FM.Viewer.settings.font_size + "px");
    }
    if (FM.Viewer.settings.tab_size != null) {
      this.editor.getSession().setTabSize(FM.Viewer.settings.tab_size);
    }
    if (FM.Viewer.settings.full_line_selection != null) {
      this.editor.setSelectionStyle(FM.Viewer.settings.full_line_selection ? "line" : "text");
    }
    if (FM.Viewer.settings.highlight_active_line != null) {
      this.editor.setHighlightActiveLine(FM.Viewer.settings.highlight_active_line);
    }
    if (FM.Viewer.settings.show_invisible != null) {
      this.editor.setShowInvisibles(FM.Viewer.settings.show_invisible);
    }
    if (FM.Viewer.settings.wrap_lines != null) {
      this.editor.getSession().setUseWrapMode(FM.Viewer.settings.wrap_lines);
    }
    if (FM.Viewer.settings.use_soft_tabs != null) {
      this.editor.getSession().setUseSoftTabs(FM.Viewer.settings.use_soft_tabs);
    }
    if (FM.Viewer.settings.show_line_numbers != null) {
      this.editor.renderer.setShowGutter(FM.Viewer.settings.show_line_numbers);
    }
    if (FM.Viewer.settings.highlight_selected_word != null) {
      this.editor.setHighlightSelectedWord(FM.Viewer.settings.highlight_selected_word);
    }
    if (FM.Viewer.settings.show_print_margin != null) {
      this.editor.renderer.setShowPrintMargin(FM.Viewer.settings.show_print_margin);
    }
    if (FM.Viewer.settings.code_folding_type != null) {
      this.editor.getSession().setFoldStyle(FM.Viewer.settings.code_folding_type);
    }
    if (FM.Viewer.settings.theme != null) {
      this.editor.setTheme("ace/theme/" + FM.Viewer.settings.theme);
    }
    this.editor.getSession().setMode("ace/mode/" + this.viewerMode);
    return FM.helpers.UnsetLoading(this.body);
  }
});
