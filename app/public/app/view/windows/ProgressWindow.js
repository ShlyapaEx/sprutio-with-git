// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.ProgressWindow', {
  extend: 'Ext.window.Window',
  alias: 'widget.progress-window',
  cls: 'fm-progress-window',
  layout: {
    type: 'vbox',
    align: 'center'
  },
  maxWidth: 400,
  resizable: false,
  title: t("Process"),
  waitConfig: {
    duration: 2000,
    animate: true,
    text: t("Initiate an operation...")
  },
  cancelable: false,
  cancelled: false,
  session: null,
  target_session: null,
  operationStatus: null,
  initComponent: function(config) {
    var bottomTb;
    FM.Logger.log('FM.view.windows.ProgressWindow init');
    this.items = [];
    this.progressbar = Ext.create('Ext.ProgressBar', {
      width: 300,
      height: 18,
      border: 1,
      text: this.waitConfig.text,
      style: {
        borderStyle: 'solid',
        borderColor: '#19639f #d0d4d6 #d0d4d6 #19639f'
      },
      margin: '0 10 10 10'
    });
    this.progressbar.wait(this.waitConfig);
    if (this.msg != null) {
      this.items.push({
        xtype: 'container',
        margin: 0,
        padding: '0 15',
        layout: {
          type: 'vbox',
          align: 'center'
        },
        items: [
          {
            xtype: 'displayfield',
            fieldLabel: this.msg,
            labelSeparator: '',
            labelStyle: 'text-align: center; padding-bottom: 10px;',
            labelWidth: 'auto',
            margin: '10 0 0 0'
          }, this.progressbar
        ]
      });
    }
    if (this.cancelable) {
      bottomTb = new Ext.toolbar.Toolbar({
        ui: 'footer',
        dock: 'bottom',
        layout: {
          pack: 'center'
        },
        padding: '0 8 10 16',
        items: [
          {
            handler: (function(_this) {
              return function() {
                _this.cancelled = true;
                if (_this.cancel != null) {
                  return _this.cancel(_this, _this.session, _this.operationStatus);
                } else {
                  return _this.close();
                }
              };
            })(this),
            scope: this,
            text: t("Cancel"),
            minWidth: 75
          }
        ]
      });
      this.dockedItems = [bottomTb];
    }
    return this.callParent(arguments);
  },
  setSession: function(session) {
    return this.session = session;
  },
  hide: function() {
    return setTimeout((function(_this) {
      return function() {
        return FM.view.windows.ProgressWindow.superclass.hide.call(_this);
      };
    })(this), 500);
  },
  getSession: function() {
    return this.session;
  },
  hasSession: function() {
    if (this.session != null) {
      return true;
    } else {
      return false;
    }
  },
  setTargetSession: function(session) {
    return this.target_session = session;
  },
  getTargetSession: function() {
    return this.target_session;
  },
  hasTargetSession: function() {
    if (this.target_session != null) {
      return true;
    } else {
      return false;
    }
  },
  setOperationStatus: function(status) {
    return this.operationStatus = status;
  },
  hasOperationStatus: function() {
    if (this.operationStatus != null) {
      return true;
    } else {
      return false;
    }
  },
  getOperationStatus: function() {
    return this.operationStatus;
  },
  updateProgressText: function(msg) {
    FM.Logger.info(msg, this.progressbar);
    this.progressbar.updateText(t(msg));
    return FM.Logger.info('updated', msg, this.progressbar);
  },
  updateProgress: function(percent, label, animation) {
    if (animation == null) {
      animation = true;
    }
    FM.Logger.info("updateProgress() ", arguments, animation);
    if (this.progressbar.isWaiting()) {
      this.progressbar.reset();
    }
    return this.progressbar.updateProgress(percent, t(label), animation);
  }
});
