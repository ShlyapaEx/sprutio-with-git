// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.SearchTextWindow', {
  extend: 'Ext.ux.window.Window',
  requires: ['FM.view.grids.FileSearchList', 'FM.view.forms.SearchTextForm'],
  alias: 'widget.search-text-window',
  cls: 'fm-search-text-window',
  title: t("Search Text In Files"),
  animate: true,
  constrain: true,
  layout: 'anchor',
  bodyPadding: '0 0 20 0',
  width: 600,
  height: 450,
  resizable: {
    handles: 's n',
    minHeight: 300,
    maxHeight: 900
  },
  maximizable: true,
  modal: false,
  border: false,
  operationStatus: null,
  items: [
    {
      xtype: 'search-text-form'
    }, {
      xtype: 'file-search-list'
    }
  ],
  listeners: {
    show: {
      fn: function() {
        if (this.keymap != null) {
          this.keymap.destroy();
        }
        this.keymap = new Ext.util.KeyMap({
          target: this.getEl(),
          binding: [
            {
              key: Ext.event.Event.ENTER,
              ctrl: true,
              fn: FM.HotKeys.HotKeyDecorator((function(_this) {
                return function(key, e) {
                  var button, i, len, ref;
                  ref = _this.preset;
                  for (i = 0, len = ref.length; i < len; i++) {
                    button = ref[i];
                    if ((button.enter != null) && button.enter && (button.ctrl != null) && button.ctrl && !button.isDisabled()) {
                      if (button.handler != null) {
                        button.handler(button, e);
                      }
                    }
                  }
                  return e.stopEvent();
                };
              })(this))
            }
          ]
        });
        Ext.ComponentQuery.query('textfield[name=search-text-path]', this)[0].setValue(this.session.path);
        return this.updateSearchFilterState(true);
      }
    },
    resize: {
      fn: function() {
        var grid, h;
        FM.Logger.debug("SearchTextWindow resize()", arguments);
        grid = Ext.ComponentQuery.query('file-search-list', this)[0];
        h = this.getHeight();
        return grid.setHeight(h - 295);
      }
    }
  },
  fileListStore: null,
  initComponent: function() {
    this.search_btn = Ext.create('Ext.button.Button', {
      handler: (function(_this) {
        return function(button, e) {
          var path, text;
          FM.Logger.debug("Search text handler called()", arguments, _this);
          if (_this.search != null) {
            text = Ext.ComponentQuery.query('textfield[name=search-file-text]', _this)[0].getValue();
            path = Ext.ComponentQuery.query('textfield[name=search-text-path]', _this)[0].getValue();
            return _this.search(button, _this, e, {
              text: text,
              path: path
            });
          }
        };
      })(this),
      scope: this,
      text: t("Search"),
      ctrl: true,
      enter: true
    });
    this.cancel_btn = Ext.create('Ext.button.Button', {
      handler: (function(_this) {
        return function(button, e) {
          FM.Logger.debug("Search text Cancel handler called()", arguments, _this);
          _this.cancelled = true;
          if (_this.cancel != null) {
            return _this.cancel(button, _this, e, _this.getOperationStatus());
          } else {
            return _this.close();
          }
        };
      })(this),
      scope: this,
      text: t("Cancel"),
      disabled: false,
      hidden: true
    });
    this.close_btn = Ext.create('Ext.button.Button', {
      handler: (function(_this) {
        return function() {
          FM.Logger.debug("Search text Close handler called()", arguments, _this);
          return _this.close();
        };
      })(this),
      scope: this,
      text: t("Close")
    });
    this.buttons = [this.search_btn, this.cancel_btn, this.close_btn];
    this.preset = [this.search_btn, this.close_btn, this.cancel_btn];
    return this.callParent(arguments);
  },
  setSession: function(session) {
    return this.session = session;
  },
  getSession: function() {
    return this.session;
  },
  hasSession: function() {
    if (this.session != null) {
      return true;
    } else {
      return false;
    }
  },
  setOperationStatus: function(status) {
    return this.operationStatus = status;
  },
  hasOperationStatus: function() {
    if (this.operationStatus != null) {
      return true;
    } else {
      return false;
    }
  },
  updateSearchFilterState: function(state) {
    var searchFilter;
    searchFilter = Ext.ComponentQuery.query('searchfield[name=search-text-filter]', this)[0];
    return searchFilter.setDisabled(state);
  },
  getOperationStatus: function() {
    return this.operationStatus;
  }
});
