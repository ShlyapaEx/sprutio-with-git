// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.IPBlockWindow', {
  extend: 'Ext.ux.window.Window',
  requires: ['FM.view.forms.IPBlockForm'],
  alias: 'widget.ip-block-window',
  title: t("IP block"),
  cls: 'fm-ip-block-window',
  animate: true,
  constrain: true,
  bodyPadding: '10 0 0 0',
  layout: 'fit',
  width: 600,
  height: 605,
  resizable: true,
  maximizable: true,
  modal: false,
  border: false,
  items: [
    {
      xtype: 'ip-block-form'
    }
  ],
  listeners: {
    show: {
      fn: function() {
        if (this.keymap != null) {
          this.keymap.destroy();
        }
        return this.keymap = new Ext.util.KeyMap({
          target: this.getEl(),
          binding: [
            {
              key: Ext.event.Event.ENTER,
              ctrl: true,
              fn: FM.HotKeys.HotKeyDecorator((function(_this) {
                return function(key, e) {
                  var button, i, len, ref;
                  FM.Logger.debug('ctrl + enter', arguments, _this);
                  ref = _this.preset;
                  for (i = 0, len = ref.length; i < len; i++) {
                    button = ref[i];
                    if ((button.enter != null) && button.enter && (button.ctrl != null) && button.ctrl && !button.isDisabled()) {
                      if (button.handler != null) {
                        button.handler(button, e);
                      }
                    }
                  }
                  return e.stopEvent();
                };
              })(this))
            }
          ]
        });
      }
    },
    resize: {
      fn: function() {
        var grid, grids, h, i, len, results;
        FM.Logger.debug("IPBlockWindow resize()", arguments);
        grids = Ext.ComponentQuery.query('ip-block-list', this);
        h = this.getHeight();
        results = [];
        for (i = 0, len = grids.length; i < len; i++) {
          grid = grids[i];
          results.push(grid.setHeight((h - 306) / 2));
        }
        return results;
      }
    }
  },
  initComponent: function() {
    FM.Logger.debug('FM.view.windows.IPBlockWindow initComponent() called', arguments);
    this.save_btn = Ext.create('Ext.button.Button', {
      text: t("Save"),
      cls: 'fm-button-ip-block-save',
      disabled: false,
      scope: this,
      ctrl: true,
      enter: true,
      handler: (function(_this) {
        return function(button, e) {
          var allow_all, allowed, allowed_grid, denied, denied_grid, deny_all, order, order_value;
          FM.Logger.debug("IP Block save handler called()", arguments, _this);
          if (_this.save != null) {
            allow_all = Ext.ComponentQuery.query('checkbox[name=allow-all]', _this)[0].checked ? true : false;
            deny_all = Ext.ComponentQuery.query('checkbox[name=deny-all]', _this)[0].checked ? true : false;
            order_value = Ext.ComponentQuery.query('combobox[name=rule-process]', _this)[0].getValue();
            if (order_value === 'allow-deny') {
              order = 'Allow,Deny';
            } else if (order_value === 'deny-allow') {
              order = 'Deny,Allow';
            }
            allowed = [];
            denied = [];
            allowed_grid = Ext.ComponentQuery.query('ip-block-list[name=ip-allowed-list]', _this)[0];
            denied_grid = Ext.ComponentQuery.query('ip-block-list[name=ip-denied-list]', _this)[0];
            allowed_grid.getStore().getData().each(function(record) {
              return allowed.push({
                ip: record.get('ip'),
                comment: record.get('comment')
              });
            });
            denied_grid.getStore().getData().each(function(record) {
              return denied.push({
                ip: record.get('ip'),
                comment: record.get('comment')
              });
            });
            return _this.save(button, _this, e, {
              allow_all: allow_all,
              deny_all: deny_all,
              order: order,
              denied: denied,
              allowed: allowed
            });
          }
        };
      })(this)
    });
    this.close_btn = Ext.create('Ext.button.Button', {
      scope: this,
      cls: 'fm-button-ip-block-close',
      text: t("Close"),
      handler: (function(_this) {
        return function() {
          FM.Logger.debug("IP Block close handler called()", arguments, _this);
          return _this.close();
        };
      })(this)
    });
    this.buttons = [this.save_btn, this.close_btn];
    this.preset = [this.save_btn, this.close_btn];
    FM.Logger.debug('FM.view.windows.IPBlockWindow init done', this, this.buttons, this.preset);
    return this.callParent(arguments);
  },
  setSession: function(session) {
    return this.session = session;
  },
  getSession: function() {
    return this.session;
  },
  hasSession: function() {
    if (this.session != null) {
      return true;
    } else {
      return false;
    }
  },
  setRules: function(rules) {
    var allowed_grid, denied_grid;
    FM.Logger.debug("FIPBlockWindow setRules() called", arguments);
    Ext.ComponentQuery.query('checkbox[name=allow-all]', this)[0].setValue(rules.allow_all);
    Ext.ComponentQuery.query('checkbox[name=deny-all]', this)[0].setValue(rules.deny_all);
    if (rules.order === 'Allow,Deny') {
      Ext.ComponentQuery.query('combobox[name=rule-process]', this)[0].setValue('allow-deny');
    } else if (rules.order === 'Deny,Allow') {
      Ext.ComponentQuery.query('combobox[name=rule-process]', this)[0].setValue('deny-allow');
    }
    allowed_grid = Ext.ComponentQuery.query('ip-block-list[name=ip-allowed-list]', this)[0];
    denied_grid = Ext.ComponentQuery.query('ip-block-list[name=ip-denied-list]', this)[0];
    allowed_grid.getStore().loadData(rules.allowed);
    return denied_grid.getStore().loadData(rules.denied);
  }
});
