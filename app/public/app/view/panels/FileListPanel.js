// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.panels.FileListPanel', {
  extend: 'Ext.panel.Panel',
  requires: ['FM.view.grids.FileList', 'FM.view.toolbars.FileListTopToolbar', 'FM.view.toolbars.FileListBottomToolbar'],
  alias: 'widget.filelist-panel',
  cls: 'fm-file-list-panel',
  layout: 'fit',
  tbar: {
    xtype: 'file-list-top-toolbar'
  },
  bbar: {
    xtype: 'file-list-bottom-toolbar'
  },
  items: [
    {
      xtype: "filelist"
    }
  ],
  initComponent: function() {
    FM.Logger.log('FM.view.panels.FileListPanel init');
    this.session = {};
    this.actions = {};
    return this.callParent(arguments);
  },
  initTopToolBarHandlers: function() {
    var button_root, button_up, toolbar;
    FM.Logger.log('initTopToolBarHandlers()');
    toolbar = Ext.ComponentQuery.query('file-list-top-toolbar', this)[0];
    button_root = toolbar.items.get(1);
    button_up = toolbar.items.get(2);
    button_up.setHandler((function(_this) {
      return function() {
        return FM.Actions.Up.execute(_this.session.path, _this);
      };
    })(this));
    return button_root.setHandler((function(_this) {
      return function() {
        return FM.Actions.Root.execute(_this);
      };
    })(this));
  },
  initEmptyContextMenu: function() {
    var items;
    FM.Logger.debug('call initEmptyContextMenu()');
    items = [];
    if (FM.helpers.isAllowed(FM.Actions.NewFile, this, []) && this.session.type !== 'webdav') {
      items.push({
        text: FM.Actions.NewFile.getMenuText(),
        iconCls: FM.Actions.NewFile.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.NewFile.execute(_this);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.NewFolder, this, [])) {
      items.push({
        text: FM.Actions.NewFolder.getMenuText(),
        iconCls: FM.Actions.NewFolder.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.NewFolder.execute(_this);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Upload, this, [])) {
      items.push({
        text: FM.Actions.Upload.getMenuText(),
        iconCls: FM.Actions.Upload.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.Upload.execute();
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Refresh, this, [])) {
      items.push({
        text: FM.Actions.Refresh.getMenuText(),
        iconCls: FM.Actions.Refresh.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.Refresh.execute([_this]);
          };
        })(this)
      });
    }
    return this.empty_context_menu = Ext.create('Ext.menu.Menu', {
      items: items
    });
  },
  hasContextMenu: function(record) {
    if (record.get('name') === '..') {
      return false;
    }
    if (record.get('is_link')) {
      return false;
    }
    return true;
  },
  setShareStatus: function(is_share, is_share_write) {
    FM.Logger.debug("setShareStatus() called ", arguments);
    this.session.is_share = is_share === 1 ? true : false;
    return this.session.is_share_write = is_share_write === 1 ? true : false;
  },
  getContextMenu: function(record) {
    var i, items, len, menu, menus, path, select_multiply, selection_array;
    FM.Logger.debug("getContextMenu() called ", record, this.session);
    selection_array = this.filelist.getView().getSelectionModel().getSelection();
    select_multiply = false;
    menus = Ext.ComponentQuery.query('menu[name=fm-file-list-context-menu]');
    for (i = 0, len = menus.length; i < len; i++) {
      menu = menus[i];
      menu.close();
    }
    if (selection_array.length > 1) {
      select_multiply = true;
    }
    items = [];
    if (FM.helpers.isAllowed(FM.Actions.Open, this, selection_array)) {
      path = FM.helpers.GetAbsName(this.session, record);
      items.push({
        text: FM.Actions.Open.getMenuText(),
        iconCls: FM.Actions.Open.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.Open.execute(_this, path);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Rename, this, selection_array)) {
      items.push({
        text: FM.Actions.Rename.getMenuText(),
        iconCls: FM.Actions.Rename.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.Rename.execute(_this, record);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.View, this, selection_array)) {
      items.push({
        text: FM.Actions.View.getMenuText(),
        iconCls: FM.Actions.View.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.View.execute(_this, record);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Edit, this, selection_array)) {
      items.push({
        text: FM.Actions.Edit.getMenuText(),
        iconCls: FM.Actions.Edit.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.Edit.execute(_this, record);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.DownloadBasic, this, selection_array)) {
      items.push({
        text: FM.Actions.DownloadBasic.getMenuText(),
        iconCls: FM.Actions.DownloadBasic.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.DownloadBasic.execute(_this, record);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.DownloadZip, this, selection_array)) {
      items.push({
        text: FM.Actions.DownloadZip.getMenuText(),
        iconCls: FM.Actions.DownloadZip.getIconCls(),
        handler: (function(_this) {
          return function() {
            var records;
            records = FM.helpers.GetSelected(_this);
            return FM.Actions.DownloadZip.execute(_this, records);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.CreateArchive, this, selection_array)) {
      items.push({
        text: FM.Actions.CreateArchive.getMenuText(),
        iconCls: FM.Actions.CreateArchive.getIconCls(),
        handler: (function(_this) {
          return function() {
            var records;
            records = FM.helpers.GetSelected(_this);
            return FM.Actions.CreateArchive.execute(_this, records);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.ExtractArchive, this, selection_array)) {
      items.push({
        text: FM.Actions.ExtractArchive.getMenuText(),
        iconCls: FM.Actions.ExtractArchive.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.ExtractArchive.execute(_this, record);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Copy, this, selection_array)) {
      items.push({
        text: FM.Actions.Copy.getMenuText(),
        iconCls: FM.Actions.Copy.getIconCls(),
        handler: (function(_this) {
          return function() {
            var records;
            records = FM.helpers.GetSelected(_this);
            return FM.Actions.Copy.execute(_this, FM.helpers.NextPanel(_this), FM.helpers.NextPanel(_this).session.path, records);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Move, this, selection_array)) {
      items.push({
        text: FM.Actions.Move.getMenuText(),
        iconCls: FM.Actions.Move.getIconCls(),
        handler: (function(_this) {
          return function() {
            var records;
            records = FM.helpers.GetSelected(_this);
            return FM.Actions.Move.execute(_this, FM.helpers.NextPanel(_this), records);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.CreateCopy, this, selection_array)) {
      items.push({
        text: FM.Actions.CreateCopy.getMenuText(),
        iconCls: FM.Actions.CreateCopy.getIconCls(),
        handler: (function(_this) {
          return function() {
            var records;
            records = FM.helpers.GetSelected(_this);
            return FM.Actions.CreateCopy.execute(_this, records);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.AnalyzeSize, this, selection_array)) {
      path = FM.helpers.GetAbsName(this.session, record);
      items.push({
        text: FM.Actions.AnalyzeSize.getMenuText(),
        iconCls: FM.Actions.AnalyzeSize.getIconCls(),
        handler: (function(_this) {
          return function() {
            return FM.Actions.AnalyzeSize.execute(_this, path);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Chmod, this, selection_array)) {
      items.push({
        text: FM.Actions.Chmod.getMenuText(),
        iconCls: FM.Actions.Chmod.getIconCls(),
        handler: (function(_this) {
          return function() {
            var records;
            records = FM.helpers.GetSelected(_this);
            return FM.Actions.Chmod.execute(_this, records);
          };
        })(this)
      });
    }
    if (FM.helpers.isAllowed(FM.Actions.Remove, this, selection_array)) {
      items.push({
        text: FM.Actions.Remove.getMenuText(),
        iconCls: FM.Actions.Remove.getIconCls(),
        handler: (function(_this) {
          return function() {
            var paths, records;
            records = FM.helpers.GetSelected(_this);
            paths = FM.helpers.GetAbsNames(_this.session, records);
            return FM.Actions.Remove.execute(_this, paths);
          };
        })(this)
      });
    }
    menu = Ext.create('Ext.menu.Menu', {
      name: 'fm-file-list-context-menu',
      items: items
    });
    return menu;
  },
  updateStatusBar: function() {
    var dirs, files, i, len, record, records, size, status_bar;
    FM.Logger.log('updateStatusBar() called', this, arguments);
    size = 0;
    dirs = 0;
    files = 0;
    records = this.filelist.store.data.items;
    for (i = 0, len = records.length; i < len; i++) {
      record = records[i];
      if (record.get('is_dir') && record.get('name') !== '..') {
        dirs++;
      } else if (!record.get('is_dir')) {
        files++;
        size += parseInt(record.get("size"));
      }
    }
    status_bar = Ext.ComponentQuery.query('file-list-status-bar', this)[0];
    return status_bar.setText(t("Size: $1, dirs: $2, files: $3", FM.helpers.SizeFormat(size), dirs, files));
  },
  updatePathBar: function() {
    var container_width, crumb_path, crumbs, dirs, i, key, len, offset_left, part, path, pathbar, results, separator, txt_separator, width, windows;
    FM.Logger.log('updatePathbar called ', this.toString());
    pathbar = Ext.ComponentQuery.query('file-list-path-bar', this)[0];
    offset_left = pathbar.getBox().x - pathbar.container.getBox().x;
    container_width = pathbar.container.getWidth() - offset_left - 90;
    path = this.session.path;
    if (path.indexOf("\\") !== -1) {
      separator = '\\\\';
      txt_separator = '\\';
      windows = true;
    } else {
      separator = '/';
      txt_separator = '/';
      windows = false;
    }
    crumbs = path.split(/\\|\//);
    dirs = [];
    for (key = i = 0, len = crumbs.length; i < len; key = ++i) {
      part = crumbs[key];
      if (part === '') {
        continue;
      }
      crumb_path = crumbs.slice(0, key + 1).join(separator);
      if (windows && key === 0) {
        crumb_path += '\\\\';
      }
      FM.Logger.debug('crumb_path=', crumb_path);
      dirs.push('<span onclick="FM.Actions.Open.execute(FM.' + this + ', \'' + crumb_path + '\');">' + part + '</span>');
    }
    if (windows) {
      if (dirs.length > 1) {
        pathbar.setText(dirs.join(txt_separator));
      } else {
        pathbar.setText(dirs.join(txt_separator) + txt_separator);
      }
    } else {
      pathbar.setText(txt_separator + dirs.join(txt_separator));
    }
    width = pathbar.getWidth();
    results = [];
    while (width >= container_width) {
      dirs.shift();
      pathbar.setText(".." + txt_separator + dirs.join(txt_separator));
      results.push(width = pathbar.getWidth());
    }
    return results;
  },
  setQuota: function(visible, percent, text) {
    var size_bar;
    if (visible == null) {
      visible = true;
    }
    size_bar = Ext.ComponentQuery.query('file-list-size-bar', this)[0];
    if (visible) {
      size_bar.show();
    } else {
      size_bar.hide();
    }
    if (text != null) {
      size_bar.updateText(text);
    }
    if (percent != null) {
      return size_bar.updateProgress(percent);
    }
  },
  setServerName: function(server_name) {
    var server_bar;
    server_bar = Ext.ComponentQuery.query('file-list-server-bar', this)[0];
    return server_bar.setText(server_name);
  },
  setFastMenu: function(menu) {
    var fast_button;
    FM.Logger.debug("FileListPanel setFastMenu()", this, arguments);
    if (!menu.items.length > 0) {
      return;
    }
    fast_button = this.getFastMenuButton();
    return fast_button.setMenu(menu);
  },
  getFastMenuButton: function() {
    var toolbar;
    toolbar = Ext.ComponentQuery.query('file-list-top-toolbar', this)[0];
    return toolbar.items.get(0);
  }
});
