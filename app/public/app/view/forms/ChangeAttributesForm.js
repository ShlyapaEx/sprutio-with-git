// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.forms.ChangeAttributesForm', {
  extend: 'Ext.form.Panel',
  alias: 'widget.change-attributes-form',
  cls: 'fm-change-attributes-form',
  items: [],
  bodyStyle: {
    background: 'none'
  },
  requires: ['Ext.form.RadioGroup', 'Ext.form.field.Text', 'Ext.form.field.Radio'],
  initComponent: function() {
    FM.Logger.log('FM.view.forms.ChangeAttributesForm init');
    this.items = [];
    this.items.push({
      xtype: 'checkboxgroup',
      layout: {
        type: 'hbox',
        align: 'middle'
      },
      bodyStyle: {
        background: 'none'
      },
      defaults: {
        flex: 1
      },
      bodyPadding: '3 0 3 0',
      fieldLabel: t("Owner Permissions"),
      labelAlign: 'top',
      labelCls: 'label-bold',
      margin: '0 0 10 0',
      items: [
        {
          xtype: 'checkbox',
          boxLabel: t("Read"),
          name: 'owner-read',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }, {
          xtype: 'checkbox',
          boxLabel: t("Write"),
          name: 'owner-write',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }, {
          xtype: 'checkbox',
          boxLabel: t("Execute"),
          name: 'owner-execute',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }
      ]
    });
    this.items.push({
      xtype: 'checkboxgroup',
      layout: {
        type: 'hbox',
        align: 'middle'
      },
      bodyStyle: {
        background: 'none'
      },
      defaults: {
        flex: 1
      },
      bodyPadding: '3 0 3 0',
      fieldLabel: t("Group Permissions"),
      labelAlign: 'top',
      labelCls: 'label-bold',
      margin: '0 0 10 0',
      items: [
        {
          xtype: 'checkbox',
          boxLabel: t("Read"),
          name: 'group-read',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }, {
          xtype: 'checkbox',
          boxLabel: t("Write"),
          name: 'group-write',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }, {
          xtype: 'checkbox',
          boxLabel: t("Execute"),
          name: 'group-execute',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }
      ]
    });
    this.items.push({
      xtype: 'checkboxgroup',
      layout: {
        type: 'hbox',
        align: 'middle'
      },
      bodyStyle: {
        background: 'none'
      },
      defaults: {
        flex: 1
      },
      bodyPadding: '3 0 3 0',
      fieldLabel: t("Public Permissions"),
      labelAlign: 'top',
      labelCls: 'label-bold',
      margin: '0 0 10 0',
      items: [
        {
          xtype: 'checkbox',
          boxLabel: t("Read"),
          name: 'public-read',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }, {
          xtype: 'checkbox',
          boxLabel: t("Write"),
          name: 'public-write',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }, {
          xtype: 'checkbox',
          boxLabel: t("Execute"),
          name: 'public-execute',
          padding: '5 0 5 0',
          listeners: {
            change: (function(_this) {
              return function(field, newValue, oldValue) {
                return _this.chmodAttributeHandler(field, newValue, oldValue);
              };
            })(this)
          }
        }
      ]
    });
    this.items.push({
      xtype: 'textfield',
      name: 'chmod-code',
      labelStyle: 'width:120px',
      fieldLabel: t("Digital Value"),
      allowBlank: false,
      minLength: 0,
      maxLength: 3,
      enforceMaxLength: 3,
      regex: /^[0-7]{3}$/,
      regexText: t("Incorrect chmod value"),
      listeners: {
        change: (function(_this) {
          return function(field, newValue, oldValue) {
            return _this.chmodCodeHandler(field, newValue, oldValue);
          };
        })(this)
      }
    });
    this.items.push({
      xtype: 'checkbox',
      boxLabel: t("Recurse into subfolders"),
      name: 'apply-recursively',
      margin: '10 0 0 0',
      listeners: {
        change: (function(_this) {
          return function(field, newValue) {
            if (newValue === true) {
              return Ext.ComponentQuery.query('radiogroup[cls=recursive-mode-group]', _this)[0].setDisabled(false);
            } else {
              return Ext.ComponentQuery.query('radiogroup[cls=recursive-mode-group]', _this)[0].setDisabled(true);
            }
          };
        })(this)
      }
    });
    this.items.push({
      xtype: 'radiogroup',
      cls: 'recursive-mode-group',
      margin: '5 0 0 0',
      disabled: true,
      columns: 1,
      items: [
        {
          boxLabel: t("Apply to all files and directories"),
          name: 'recursive-mode',
          inputValue: 'all',
          checked: true
        }, {
          boxLabel: t("Apply to files only"),
          name: 'recursive-mode',
          inputValue: 'files'
        }, {
          boxLabel: t("Apply to directories only"),
          name: 'recursive-mode',
          inputValue: 'dirs'
        }
      ]
    });
    return this.callParent(arguments);
  },
  chmodAttributeHandler: function(field, newValue, oldValue) {
    var chmod_code, chmod_regexp, group_execute, group_read, group_write, owner_execute, owner_read, owner_write, public_execute, public_read, public_write;
    FM.Logger.debug('chmodAttributeHandler() called', arguments, this);
    owner_read = (Ext.ComponentQuery.query('checkbox[name=owner-read]', this)[0].checked ? 1 : 0) * 4;
    owner_write = (Ext.ComponentQuery.query('checkbox[name=owner-write]', this)[0].checked ? 1 : 0) * 2;
    owner_execute = (Ext.ComponentQuery.query('checkbox[name=owner-execute]', this)[0].checked ? 1 : 0) * 1;
    group_read = (Ext.ComponentQuery.query('checkbox[name=group-read]', this)[0].checked ? 1 : 0) * 4;
    group_write = (Ext.ComponentQuery.query('checkbox[name=group-write]', this)[0].checked ? 1 : 0) * 2;
    group_execute = (Ext.ComponentQuery.query('checkbox[name=group-execute]', this)[0].checked ? 1 : 0) * 1;
    public_read = (Ext.ComponentQuery.query('checkbox[name=public-read]', this)[0].checked ? 1 : 0) * 4;
    public_write = (Ext.ComponentQuery.query('checkbox[name=public-write]', this)[0].checked ? 1 : 0) * 2;
    public_execute = (Ext.ComponentQuery.query('checkbox[name=public-execute]', this)[0].checked ? 1 : 0) * 1;
    chmod_code = (owner_read + owner_write + owner_execute).toString() + (group_read + group_write + group_execute).toString() + (public_read + public_write + public_execute).toString();
    FM.Logger.debug("Chmod code = ", chmod_code);
    chmod_regexp = /^[0-7]{3}$/;
    if (!chmod_regexp.test(chmod_code)) {
      FM.Logger.error('chmod not valid: ' + chmod_code);
      this.ownerCt.chmod_btn.setDisabled(true);
      return;
    }
    Ext.ComponentQuery.query('textfield[name=chmod-code]', this)[0].setValue(chmod_code);
    return this.ownerCt.chmod_btn.setDisabled(false);
  },
  chmodCodeHandler: function(field, newValue, oldValue) {
    var chmod_regexp, group_right, owner_right, public_right, strValue;
    FM.Logger.debug('chmodCodeHandler() called', arguments, this);
    chmod_regexp = /^[0-7]{3}$/;
    if (!chmod_regexp.test(newValue)) {
      FM.Logger.error('chmod code not valid: ' + newValue);
      this.ownerCt.chmod_btn.setDisabled(true);
      return;
    }
    strValue = newValue.toString();
    owner_right = FM.helpers.ConvertToBinary(strValue[0]).toString();
    group_right = FM.helpers.ConvertToBinary(strValue[1]).toString();
    public_right = FM.helpers.ConvertToBinary(strValue[2]).toString();
    FM.Logger.debug('Owner right: ' + owner_right);
    FM.Logger.debug('Group right: ' + group_right);
    FM.Logger.debug('Public right: ' + public_right);
    Ext.ComponentQuery.query('checkbox[name=owner-read]', this)[0].setValue(Boolean(parseInt(owner_right[0])));
    Ext.ComponentQuery.query('checkbox[name=owner-write]', this)[0].setValue(Boolean(parseInt(owner_right[1])));
    Ext.ComponentQuery.query('checkbox[name=owner-execute]', this)[0].setValue(Boolean(parseInt(owner_right[2])));
    Ext.ComponentQuery.query('checkbox[name=group-read]', this)[0].setValue(Boolean(parseInt(group_right[0])));
    Ext.ComponentQuery.query('checkbox[name=group-write]', this)[0].setValue(Boolean(parseInt(group_right[1])));
    Ext.ComponentQuery.query('checkbox[name=group-execute]', this)[0].setValue(Boolean(parseInt(group_right[2])));
    Ext.ComponentQuery.query('checkbox[name=public-read]', this)[0].setValue(Boolean(parseInt(public_right[0])));
    Ext.ComponentQuery.query('checkbox[name=public-write]', this)[0].setValue(Boolean(parseInt(public_right[1])));
    Ext.ComponentQuery.query('checkbox[name=public-execute]', this)[0].setValue(Boolean(parseInt(public_right[2])));
    return this.ownerCt.chmod_btn.setDisabled(false);
  }
});
