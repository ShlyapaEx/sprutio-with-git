// Generated by CoffeeScript 1.11.1
Ext.define('FM.action.Chmod', {
  extend: 'FM.overrides.Action',
  requires: ['FM.view.windows.ChmodFilesWindow'],
  config: {
    iconCls: "fm-action-chmod",
    text: t("Edit Attributes"),
    handler: function(panel, records) {
      var bottom_toolbar, session, win;
      if (panel == null) {
        panel = FM.Active;
      }
      FM.Logger.info('Run Action FM.action.Chmod', arguments);
      if ((records == null) || records.length === 0) {
        FM.helpers.ShowError(t("Please select file entry."));
        return;
      }
      bottom_toolbar = Ext.ComponentQuery.query("bottom-panel")[0].getDockedItems("toolbar[dock='top']")[0];
      session = Ext.ux.Util.clone(panel.session);
      win = Ext.create("FM.view.windows.ChmodFilesWindow", {
        taskBar: bottom_toolbar,
        chmod: (function(_this) {
          return function(button, chmod_window, e, params) {
            var wait;
            wait = Ext.create('FM.view.windows.ProgressWindow', {
              cancelable: true,
              msg: t("Applying attributes, please wait..."),
              cancel: function(wait_window, session, status) {
                FM.Logger.debug('Chmod cancel called()', arguments);
                if (status != null) {
                  return FM.Actions.Chmod.cancel(wait_window, session, status);
                }
              }
            });
            wait.setSession(session);
            FM.Actions.Chmod.process(wait, session, params);
            return chmod_window.close();
          };
        })(this)
      });
      win.setSession(session);
      win.initRecords(records);
      return win.show();
    }
  },
  process: function(progress_window, session, params, status) {
    FM.Logger.debug('FM.action.Chmod process() called = ', arguments);
    if (status != null) {
      if ((status.status != null) && (status.status === FM.Status.STATUS_RUNNING || status.status === FM.Status.STATUS_WAIT)) {
        return setTimeout((function(_this) {
          return function() {
            return FM.backend.ajaxSend('/actions/main/check_status', {
              params: {
                session: session,
                status: status
              },
              success: function(response) {
                var percent, text;
                status = Ext.util.JSON.decode(response.responseText).data;
                if ((status.progress != null) && ((status.progress.text != null) || (status.progress.percent != null))) {
                  text = status.progress.text != null ? status.progress.text : '';
                  percent = status.progress.percent != null ? status.progress.percent : 0;
                  progress_window.updateProgress(percent, text);
                } else {
                  progress_window.updateProgressText(t("Estimating operation length..."));
                }
                return _this.process(progress_window, session, params, status);
              },
              failure: function(response) {
                FM.helpers.ShowError(t("Error during check operation status.<br/>Please contact Support."));
                return FM.Logger.error(response);
              }
            });
          };
        })(this), FM.Time.REQUEST_DELAY);
      } else {
        return FM.getApplication().fireEvent(FM.Events.file.chmodFiles, status, session, progress_window, params);
      }
    } else {
      return FM.backend.ajaxSend('/actions/files/chmod', {
        params: {
          session: session,
          params: params
        },
        success: (function(_this) {
          return function(response) {
            status = Ext.util.JSON.decode(response.responseText).data;
            progress_window.setOperationStatus(status);
            progress_window.show();
            return _this.process(progress_window, session, params, status);
          };
        })(this),
        failure: (function(_this) {
          return function(response) {
            FM.Logger.debug(response);
            FM.helpers.ShowError(t("Error during chmod files operation start. Please contact Support."));
            return FM.Logger.error(response);
          };
        })(this)
      });
    }
  },
  cancel: function(progress_window, session, status) {
    return FM.backend.ajaxSend('/actions/main/cancel_operation', {
      params: {
        session: session,
        status: status
      },
      success: (function(_this) {
        return function(response) {
          var response_data;
          response_data = Ext.util.JSON.decode(response.responseText).data;
          FM.Logger.debug(response_data);
          return progress_window.close();
        };
      })(this),
      failure: (function(_this) {
        return function(response) {
          progress_window.close();
          FM.helpers.ShowError(t("Error during chmod operation aborting. Please contact Support."));
          return FM.Logger.error(response);
        };
      })(this)
    });
  }
});
