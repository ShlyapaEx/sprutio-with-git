// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.toolbars.MainTopToolbar', {
  extend: 'Ext.toolbar.Toolbar',
  alias: 'widget.main-top-toolbar',
  id: "fm-main-top-toolbar",
  cls: "fm-main-top-toolbar",
  border: false,
  style: {
    borderStyle: 'none'
  },
  items: [],
  initComponent: function() {
    FM.Logger.log('FM.view.toolbars.MainTopToolbar init');
    this.items = [];
    this.items.push({
      xtype: "button",
      text: t("File"),
      menu: [
        {
          text: t("Create"),
          iconCls: "fm-action-create",
          name: "fm-action-create",
          menu: [
            {
              text: FM.Actions.NewFile.getMenuText(),
              name: FM.Actions.NewFile.getIconCls(),
              iconCls: FM.Actions.NewFile.getIconCls(),
              handler: function() {
                return FM.Actions.NewFile.execute(FM.Active);
              }
            }, {
              text: FM.Actions.NewFolder.getMenuText(),
              name: FM.Actions.NewFolder.getIconCls(),
              iconCls: FM.Actions.NewFolder.getIconCls(),
              handler: function() {
                return FM.Actions.NewFolder.execute(FM.Active);
              }
            }
          ]
        }, "-", {
          text: t("Operations"),
          iconCls: "fm-action-operations",
          id: "fm-menu-operations",
          menu: [
            {
              text: FM.Actions.View.getMenuText(),
              name: FM.Actions.View.getIconCls(),
              iconCls: FM.Actions.View.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var record;
                  record = FM.helpers.GetLastSelected(FM.Active);
                  if ((record != null) && record.get('name') !== '..') {
                    return FM.Actions.View.execute(FM.Active, record);
                  } else {
                    return FM.helpers.ShowError(t("Please select file entry."));
                  }
                };
              })(this)
            }, {
              text: FM.Actions.Edit.getMenuText(),
              name: FM.Actions.Edit.getIconCls(),
              iconCls: FM.Actions.Edit.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var record;
                  record = FM.helpers.GetLastSelected(FM.Active);
                  if ((record != null) && record.get('name') !== '..') {
                    return FM.Actions.Edit.execute(FM.Active, record);
                  } else {
                    return FM.helpers.ShowError(t("Please select file entry."));
                  }
                };
              })(this)
            }, {
              text: FM.Actions.Rename.getMenuText(),
              name: FM.Actions.Rename.getIconCls(),
              iconCls: FM.Actions.Rename.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var record;
                  record = FM.helpers.GetLastSelected(FM.Active);
                  return FM.Actions.Rename.execute(FM.Active, record);
                };
              })(this)
            }, {
              text: FM.Actions.Copy.getMenuText(),
              name: FM.Actions.Copy.getIconCls(),
              iconCls: FM.Actions.Copy.getIconCls(),
              handler: function() {
                var records;
                records = FM.helpers.GetSelected(FM.Active);
                return FM.Actions.Copy.execute(FM.Active, FM.Inactive, FM.Inactive.path, records);
              }
            }, {
              text: FM.Actions.Move.getMenuText(),
              name: FM.Actions.Move.getIconCls(),
              iconCls: FM.Actions.Move.getIconCls(),
              handler: function() {
                var records;
                records = FM.helpers.GetSelected(FM.Active);
                return FM.Actions.Move.execute(FM.Active, FM.Inactive, records);
              }
            }, {
              text: FM.Actions.CreateCopy.getMenuText(),
              name: FM.Actions.CreateCopy.getIconCls(),
              iconCls: FM.Actions.CreateCopy.getIconCls(),
              handler: function() {
                var records;
                records = FM.helpers.GetSelected(FM.Active);
                return FM.Actions.CreateCopy.execute(FM.Active, records);
              }
            }, {
              text: FM.Actions.CreateArchive.getMenuText(),
              name: FM.Actions.CreateArchive.getIconCls(),
              iconCls: FM.Actions.CreateArchive.getIconCls(),
              handler: function() {
                var records;
                records = FM.helpers.GetSelected(FM.Active);
                return FM.Actions.CreateArchive.execute(FM.Active, records);
              }
            }, {
              text: FM.Actions.Chmod.getMenuText(),
              name: FM.Actions.Chmod.getIconCls(),
              iconCls: FM.Actions.Chmod.getIconCls(),
              handler: function() {
                var records;
                records = FM.helpers.GetSelected(FM.Active);
                return FM.Actions.Chmod.execute(FM.Active, records);
              }
            }, {
              text: FM.Actions.Remove.getMenuText(),
              name: FM.Actions.Remove.getIconCls(),
              iconCls: FM.Actions.Remove.getIconCls(),
              handler: function() {
                var panel, records;
                panel = FM.Active;
                records = FM.helpers.GetSelected(panel);
                if (records.length === 0) {

                } else {
                  return FM.Actions.Remove.execute(panel, FM.helpers.GetAbsNames(panel.session, records));
                }
              }
            }
          ]
        }, "-", {
          text: t("Download"),
          iconCls: "fm-action-download",
          id: "fm-menu-download",
          menu: [
            {
              text: FM.Actions.DownloadBasic.getMenuText(),
              name: FM.Actions.DownloadBasic.getIconCls(),
              iconCls: FM.Actions.DownloadBasic.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var record;
                  record = FM.helpers.GetLastSelected(FM.Active);
                  return FM.Actions.DownloadBasic.execute(FM.Active, record);
                };
              })(this)
            }, "-", {
              text: FM.Actions.DownloadZip.getMenuText(),
              name: FM.Actions.DownloadZip.getIconCls(),
              iconCls: FM.Actions.DownloadZip.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var records;
                  records = FM.helpers.GetSelected(FM.Active);
                  return FM.Actions.DownloadZip.execute(FM.Active, records);
                };
              })(this)
            }, {
              text: FM.Actions.DownloadGZip.getMenuText(),
              name: FM.Actions.DownloadGZip.getIconCls(),
              iconCls: FM.Actions.DownloadGZip.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var records;
                  records = FM.helpers.GetSelected(FM.Active);
                  return FM.Actions.DownloadGZip.execute(FM.Active, records);
                };
              })(this)
            }, {
              text: FM.Actions.DownloadBZ2.getMenuText(),
              name: FM.Actions.DownloadBZ2.getIconCls(),
              iconCls: FM.Actions.DownloadBZ2.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var records;
                  records = FM.helpers.GetSelected(FM.Active);
                  return FM.Actions.DownloadBZ2.execute(FM.Active, records);
                };
              })(this)
            }, {
              text: FM.Actions.DownloadTar.getMenuText(),
              name: FM.Actions.DownloadTar.getIconCls(),
              iconCls: FM.Actions.DownloadTar.getIconCls(),
              handler: (function(_this) {
                return function() {
                  var records;
                  records = FM.helpers.GetSelected(FM.Active);
                  return FM.Actions.DownloadTar.execute(FM.Active, records);
                };
              })(this)
            }
          ]
        }, {
          text: FM.Actions.Upload.getMenuText(),
          name: FM.Actions.Upload.getIconCls(),
          iconCls: FM.Actions.Upload.getIconCls(),
          handler: (function(_this) {
            return function() {
              return FM.Actions.Upload.execute();
            };
          })(this)
        }, "-", FM.Actions.Logout
      ]
    });
    this.items.push({
      xtype: "button",
      text: t("Navigation"),
      menu: [
        {
          text: FM.Actions.Open.getMenuText(),
          name: FM.Actions.Open.getIconCls(),
          iconCls: FM.Actions.Open.getIconCls(),
          handler: (function(_this) {
            return function() {
              var record;
              record = FM.helpers.GetLastSelected(FM.Active);
              if (record) {
                if (record.get('is_dir')) {
                  return FM.Actions.Open.execute(FM.Active, FM.helpers.GetAbsName(FM.Active.session, record));
                }
              } else {
                return FM.helpers.ShowError(t("Please select file entry."));
              }
            };
          })(this)
        }, "-", {
          text: t("Search"),
          iconCls: "fm-action-search",
          id: "fm-menu-search",
          menu: [
            {
              text: FM.Actions.SearchFiles.getMenuText(),
              name: FM.Actions.SearchFiles.getIconCls(),
              iconCls: FM.Actions.SearchFiles.getIconCls(),
              handler: (function(_this) {
                return function() {
                  return FM.Actions.SearchFiles.execute(FM.Active);
                };
              })(this)
            }, {
              text: FM.Actions.SearchText.getMenuText(),
              name: FM.Actions.SearchText.getIconCls(),
              iconCls: FM.Actions.SearchText.getIconCls(),
              handler: (function(_this) {
                return function() {
                  return FM.Actions.SearchText.execute(FM.Active);
                };
              })(this)
            }
          ]
        }, "-", FM.Actions.Navigate, {
          text: FM.Actions.Refresh.getMenuText(),
          name: FM.Actions.Refresh.getIconCls(),
          iconCls: FM.Actions.Refresh.getIconCls(),
          handler: (function(_this) {
            return function() {
              return FM.Actions.Refresh.execute([FM.Left, FM.Right]);
            };
          })(this)
        }, {
          text: FM.Actions.AnalyzeSize.getMenuText(),
          name: FM.Actions.AnalyzeSize.getIconCls(),
          iconCls: FM.Actions.AnalyzeSize.getIconCls(),
          handler: (function(_this) {
            return function() {
              return FM.Actions.AnalyzeSize.execute(FM.Active, FM.Active.session.path);
            };
          })(this)
        }, "-", {
          text: t("Copy to Clipboard"),
          iconCls: "fm-action-copy",
          menu: [
            {
              text: FM.Actions.CopyPath.getMenuText(),
              name: FM.Actions.CopyPath.getIconCls(),
              iconCls: FM.Actions.CopyPath.getIconCls(),
              handler: function() {
                return FM.Actions.CopyPath.execute(FM.Active);
              }
            }, {
              text: FM.Actions.CopyEntry.getMenuText(),
              name: FM.Actions.CopyEntry.getIconCls(),
              iconCls: FM.Actions.CopyEntry.getIconCls(),
              handler: function() {
                return FM.Actions.CopyEntry.execute(FM.Active);
              }
            }
          ]
        }
      ]
    });
    this.items.push({
      xtype: "button",
      text: t("Tools"),
      menu: [
        {
          text: FM.Actions.HomeFtp.getMenuText(),
          name: FM.Actions.HomeFtp.getIconCls(),
          iconCls: FM.Actions.HomeFtp.getIconCls(),
          handler: function() {
            return FM.Actions.HomeFtp.execute(FM.Active);
          }
        }, {
          text: FM.Actions.RemoteConnections.getMenuText(),
          name: FM.Actions.RemoteConnections.getIconCls(),
          iconCls: FM.Actions.RemoteConnections.getIconCls(),
          handler: function() {
            return FM.Actions.RemoteConnections.execute(FM.Active);
          }
        }, "-", {
          text: FM.Actions.IPBlock.getMenuText(),
          name: FM.Actions.IPBlock.getIconCls(),
          iconCls: FM.Actions.IPBlock.getIconCls(),
          handler: function() {
            return FM.Actions.IPBlock.execute(FM.Active);
          }
        }, "-", FM.Actions.Settings
      ]
    });
    this.items.push("->");
    this.items.push({
      xtype: "button",
      text: t("Language"),
      menu: {
        xtype: 'menu',
        items: [
          {
            text: t("Русский"),
            href: "/?language=ru",
            iconCls: 'fm-icon-lang-ru'
          }, {
            text: t("English"),
            href: "/?language=en",
            iconCls: 'fm-icon-lang-en'
          }, {
            text: t("Deutsch"),
            href: "/?language=de",
            iconCls: 'fm-icon-lang-de'
          }
        ]
      }
    });
    this.items.push(FM.Actions.Help);
    this.items.push(FM.Actions.Logout);
    return this.callParent(arguments);
  }
});
