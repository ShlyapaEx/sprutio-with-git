// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.CreateArchiveWindow', {
  extend: 'Ext.ux.window.Window',
  requires: ['FM.view.forms.CreateArchiveForm'],
  alias: 'widget.create-archive-window',
  title: t("Create Archive"),
  cls: 'fm-create-archive-window',
  animate: true,
  constrain: true,
  layout: 'fit',
  bodyPadding: '15 15 10 15',
  width: 420,
  height: 275,
  resizable: false,
  maximizable: false,
  modal: true,
  border: false,
  items: [
    {
      xtype: 'create-archive-form'
    }
  ],
  operationStatus: null,
  listeners: {
    show: {
      fn: function() {
        if (this.keymap != null) {
          this.keymap.destroy();
        }
        return this.keymap = new Ext.util.KeyMap({
          target: this.getEl(),
          binding: [
            {
              key: Ext.event.Event.ENTER,
              ctrl: true,
              fn: FM.HotKeys.HotKeyDecorator((function(_this) {
                return function(key, e) {
                  var button, i, len, ref;
                  FM.Logger.debug('ctrl + enter', arguments, _this);
                  ref = _this.preset;
                  for (i = 0, len = ref.length; i < len; i++) {
                    button = ref[i];
                    if ((button.enter != null) && button.enter && (button.ctrl != null) && button.ctrl && !button.isDisabled()) {
                      if (button.handler != null) {
                        button.handler(button, e);
                      }
                    }
                  }
                  return e.stopEvent();
                };
              })(this))
            }
          ]
        });
      }
    },
    beforeshow: {
      fn: function() {
        FM.Logger.debug('FM.view.windows.CreateArchiveWindow beforeshow() called', this, arguments);
        Ext.ComponentQuery.query('textfield[name=archive-file-name]', this)[0].setValue("archive_" + FM.helpers.DateTimestamp());
        return Ext.ComponentQuery.query('textfield[name=archive-path-name]', this)[0].setValue(this.getSession().path);
      }
    }
  },
  initComponent: function() {
    FM.Logger.debug('FM.view.windows.ChmodFilesWindow initComponent() called', arguments);
    this.create_btn = Ext.create('Ext.button.Button', {
      text: t("Create Archive"),
      cls: 'fm-button-archive-create',
      disabled: false,
      scope: this,
      ctrl: true,
      enter: true,
      handler: (function(_this) {
        return function(button, e) {
          var file, filepath, path, paths, type;
          FM.Logger.debug("CreateArchive create handler called()", arguments, _this);
          if (_this.create != null) {
            path = Ext.ComponentQuery.query('textfield[name=archive-path-name]', _this)[0].getValue();
            file = Ext.ComponentQuery.query('textfield[name=archive-file-name]', _this)[0].getValue();
            filepath = path === '/' ? path + file : path + '/' + file;
            type = Ext.ComponentQuery.query('radio[name=type]', _this)[0].getGroupValue();
            paths = _this.getPaths();
            return _this.create(button, _this, e, {
              path: filepath,
              type: type,
              files: paths,
              archive_name: file
            });
          }
        };
      })(this)
    });
    this.cancel_btn = Ext.create('Ext.button.Button', {
      cls: 'fm-button-archive-cancel',
      scope: this,
      text: t("Cancel"),
      disabled: false,
      hidden: true,
      handler: (function(_this) {
        return function(button, e) {
          FM.Logger.debug("CreateArchive Cancel handler called()", arguments, _this);
          _this.cancelled = true;
          if (_this.cancel != null) {
            return _this.cancel(button, _this, e, _this.getOperationStatus());
          } else {
            return _this.close();
          }
        };
      })(this)
    });
    this.close_btn = Ext.create('Ext.button.Button', {
      scope: this,
      text: t("Close"),
      handler: (function(_this) {
        return function() {
          FM.Logger.debug("CreateArchive Close handler called()", arguments, _this);
          return _this.close();
        };
      })(this)
    });
    this.buttons = [this.create_btn, this.cancel_btn, this.close_btn];
    this.preset = [this.create_btn, this.close_btn, this.cancel_btn];
    FM.Logger.debug('CreateArchiveWindow init() done', this, this.buttons, this.preset);
    return this.callParent(arguments);
  },
  setSession: function(session) {
    return this.session = session;
  },
  getSession: function() {
    return this.session;
  },
  hasSession: function() {
    if (this.session != null) {
      return true;
    } else {
      return false;
    }
  },
  setOperationStatus: function(status) {
    return this.operationStatus = status;
  },
  hasOperationStatus: function() {
    if (this.operationStatus != null) {
      return true;
    } else {
      return false;
    }
  },
  getOperationStatus: function() {
    return this.operationStatus;
  },
  initRecords: function(records) {
    var i, len, record, results;
    if (records == null) {
      records = [];
    }
    this.paths = [];
    results = [];
    for (i = 0, len = records.length; i < len; i++) {
      record = records[i];
      results.push(this.paths.push({
        path: FM.helpers.GetAbsName(this.getSession(), record),
        base64: record.get('base64')
      }));
    }
    return results;
  },
  getPaths: function() {
    return this.paths;
  }
});
