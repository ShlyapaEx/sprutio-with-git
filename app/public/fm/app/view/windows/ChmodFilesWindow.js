// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.ChmodFilesWindow', {
  extend: 'Ext.ux.window.Window',
  requires: ['FM.view.forms.ChangeAttributesForm'],
  alias: 'widget.chmod-files-window',
  title: t("File Attributes"),
  cls: 'fm-chmod-files-window',
  animate: true,
  constrain: true,
  layout: 'fit',
  bodyPadding: '15 15 0 15',
  width: 350,
  height: 450,
  resizable: false,
  maximizable: false,
  operationStatus: null,
  hasDir: false,
  initValue: 0,
  modal: true,
  border: false,
  items: [
    {
      xtype: 'change-attributes-form'
    }
  ],
  listeners: {
    show: {
      fn: function() {
        if (this.keymap != null) {
          this.keymap.destroy();
        }
        return this.keymap = new Ext.util.KeyMap({
          target: this.getEl(),
          binding: [
            {
              key: Ext.event.Event.ENTER,
              ctrl: true,
              fn: FM.HotKeys.HotKeyDecorator((function(_this) {
                return function(key, e) {
                  var button, i, len, ref;
                  FM.Logger.debug('ctrl + enter', arguments, _this);
                  ref = _this.preset;
                  for (i = 0, len = ref.length; i < len; i++) {
                    button = ref[i];
                    if ((button.enter != null) && button.enter && (button.ctrl != null) && button.ctrl && !button.isDisabled()) {
                      if (button.handler != null) {
                        button.handler(button, e);
                      }
                    }
                  }
                  return e.stopEvent();
                };
              })(this))
            }
          ]
        });
      }
    },
    beforeshow: {
      fn: function() {
        FM.Logger.debug('FM.view.windows.ChmodFilesWindow beforeshow() called', this, arguments);
        if (!this.hasDir) {
          Ext.ComponentQuery.query('checkbox[name=apply-recursively]', this)[0].hide();
          Ext.ComponentQuery.query('radiogroup[cls=recursive-mode-group]', this)[0].hide();
          this.setHeight(350);
        }
        return Ext.ComponentQuery.query('textfield[name=chmod-code]', this)[0].setValue(this.initValue);
      }
    }
  },
  initComponent: function() {
    FM.Logger.debug('FM.view.windows.ChmodFilesWindow initComponent() called', arguments);
    this.chmod_btn = Ext.create('Ext.button.Button', {
      text: t("Change Attributes"),
      cls: 'fm-button-chmod-apply',
      disabled: true,
      scope: this,
      ctrl: true,
      enter: true,
      handler: (function(_this) {
        return function(button, e) {
          var chmod_code, group_execute, group_read, owner_execute, owner_read, paths, public_execute, public_read, question, read_problem, recursive_mode, use_recursive;
          FM.Logger.debug("Chmod files Chmod handler called()", arguments, _this);
          if (_this.chmod != null) {
            chmod_code = Ext.ComponentQuery.query('textfield[name=chmod-code]', _this)[0].getValue();
            use_recursive = Ext.ComponentQuery.query('checkbox[name=apply-recursively]', _this)[0].checked;
            recursive_mode = Ext.ComponentQuery.query('radio[name=recursive-mode]', _this)[0].getGroupValue();
            paths = _this.getPaths();
            read_problem = false;
            owner_read = Ext.ComponentQuery.query('checkbox[name=owner-read]', _this)[0].checked ? true : false;
            owner_execute = Ext.ComponentQuery.query('checkbox[name=owner-execute]', _this)[0].checked ? true : false;
            group_read = Ext.ComponentQuery.query('checkbox[name=group-read]', _this)[0].checked ? true : false;
            group_execute = Ext.ComponentQuery.query('checkbox[name=group-execute]', _this)[0].checked ? true : false;
            public_read = Ext.ComponentQuery.query('checkbox[name=public-read]', _this)[0].checked ? true : false;
            public_execute = Ext.ComponentQuery.query('checkbox[name=public-execute]', _this)[0].checked ? true : false;
            if (use_recursive && recursive_mode !== 'files') {
              if (!(owner_read || group_read || public_read)) {
                read_problem = true;
              }
              if (!(owner_execute || group_execute || public_execute)) {
                read_problem = true;
              }
            }
            if (read_problem) {
              question = Ext.create('FM.view.windows.QuestionWindow', {
                title: t("Change files attributes"),
                msg: t("Without read and execute rights you will not be able to get access to files within folders. Continue?"),
                yes: function() {
                  FM.Logger.debug('Read Problem Yes handler()');
                  return _this.chmod(button, _this, e, {
                    code: chmod_code,
                    recursive: use_recursive,
                    recursive_mode: recursive_mode,
                    paths: paths
                  });
                }
              });
              return question.show();
            } else {
              return _this.chmod(button, _this, e, {
                code: chmod_code,
                recursive: use_recursive,
                recursive_mode: recursive_mode,
                paths: paths
              });
            }
          }
        };
      })(this)
    });
    this.cancel_btn = Ext.create('Ext.button.Button', {
      cls: 'fm-button-chmod-cancel',
      scope: this,
      text: t("Cancel"),
      disabled: false,
      hidden: true,
      handler: (function(_this) {
        return function(button, e) {
          FM.Logger.debug("Chmod files Cancel handler called()", arguments, _this);
          _this.cancelled = true;
          if (_this.cancel != null) {
            return _this.cancel(button, _this, e, _this.getOperationStatus());
          } else {
            return _this.close();
          }
        };
      })(this)
    });
    this.close_btn = Ext.create('Ext.button.Button', {
      scope: this,
      text: t("Close"),
      handler: (function(_this) {
        return function() {
          FM.Logger.debug("Chmod files Close handler called()", arguments, _this);
          return _this.close();
        };
      })(this)
    });
    this.buttons = [this.chmod_btn, this.cancel_btn, this.close_btn];
    this.preset = [this.chmod_btn, this.close_btn, this.cancel_btn];
    FM.Logger.debug('ChmodFilesWindow init() done', this, this.buttons, this.preset);
    return this.callParent(arguments);
  },
  setSession: function(session) {
    return this.session = session;
  },
  getSession: function() {
    return this.session;
  },
  hasSession: function() {
    if (this.session != null) {
      return true;
    } else {
      return false;
    }
  },
  setOperationStatus: function(status) {
    return this.operationStatus = status;
  },
  hasOperationStatus: function() {
    if (this.operationStatus != null) {
      return true;
    } else {
      return false;
    }
  },
  getOperationStatus: function() {
    return this.operationStatus;
  },
  initRecords: function(records) {
    var i, len, record, results;
    if (records == null) {
      records = [];
    }
    this.paths = [];
    this.initValue = records[0].get('mode');
    results = [];
    for (i = 0, len = records.length; i < len; i++) {
      record = records[i];
      if (record.get('is_dir') === true) {
        this.hasDir = true;
      }
      results.push(this.paths.push({
        path: FM.helpers.GetAbsName(this.getSession(), record),
        base64: record.get('base64')
      }));
    }
    return results;
  },
  getPaths: function() {
    return this.paths;
  }
});
