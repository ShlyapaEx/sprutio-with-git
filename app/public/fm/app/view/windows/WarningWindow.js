// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.WarningWindow', {
  extend: 'Ext.window.Window',
  alias: 'widget.warning-window',
  cls: 'fm-warning-window',
  layout: {
    type: 'vbox',
    align: 'center'
  },
  maxWidth: 400,
  title: t('Warning'),
  resizable: false,
  buttonsPreset: 'OK',
  msgWidth: 260,
  listeners: {
    show: {
      fn: function() {
        if (this.keymap != null) {
          this.keymap.destroy();
        }
        return this.keymap = new Ext.util.KeyMap({
          target: this.getEl(),
          binding: [
            {
              key: Ext.event.Event.ENTER,
              fn: FM.HotKeys.HotKeyDecorator((function(_this) {
                return function(key, e) {
                  var button, i, len, ref;
                  ref = _this.preset;
                  for (i = 0, len = ref.length; i < len; i++) {
                    button = ref[i];
                    if ((button.enter != null) && button.enter) {
                      if (button.handler != null) {
                        button.handler();
                      }
                    }
                  }
                  return e.stopEvent();
                };
              })(this))
            }
          ]
        });
      }
    }
  },
  initComponent: function(config) {
    var bottomTb, buttons;
    FM.Logger.log('FM.view.windows.WarningWindow init');
    this.items = [];
    buttons = {};
    buttons.YES_NO = [
      {
        handler: (function(_this) {
          return function() {
            _this.close();
            if (_this.yes != null) {
              return _this.yes();
            }
          };
        })(this),
        scope: this,
        text: t("Yes"),
        minWidth: 75,
        enter: true
      }, {
        handler: (function(_this) {
          return function() {
            _this.close();
            if (_this.no != null) {
              return _this.no();
            }
          };
        })(this),
        scope: this,
        text: t("No"),
        minWidth: 75
      }
    ];
    buttons.OK = [
      {
        handler: (function(_this) {
          return function() {
            _this.close();
            if (_this.ok != null) {
              return _this.ok();
            }
          };
        })(this),
        scope: this,
        text: t("OK"),
        minWidth: 75,
        enter: true
      }
    ];
    buttons.YES_NO_CANCEL = [
      {
        handler: (function(_this) {
          return function() {
            _this.close();
            if (_this.yes != null) {
              return _this.yes();
            }
          };
        })(this),
        scope: this,
        text: t("Yes"),
        minWidth: 75,
        enter: true
      }, {
        handler: (function(_this) {
          return function() {
            _this.close();
            if (_this.no != null) {
              return _this.no();
            }
          };
        })(this),
        scope: this,
        text: t("No"),
        minWidth: 75
      }, {
        handler: (function(_this) {
          return function() {
            _this.close();
            if (_this.cancel != null) {
              return _this.cancel();
            }
          };
        })(this),
        scope: this,
        text: t("Cancel"),
        minWidth: 75
      }
    ];
    this.preset = buttons[this.buttonsPreset];
    this.items.push({
      xtype: 'container',
      cls: 'fm-msg-warning',
      height: 42,
      width: 42,
      margin: '15 0 10 0'
    });
    if (this.msg != null) {
      this.items.push({
        xtype: 'container',
        margin: 0,
        padding: '0 15',
        layout: {
          type: 'vbox',
          align: 'center'
        },
        items: [
          {
            xtype: 'displayfield',
            fieldLabel: this.msg,
            labelSeparator: '',
            labelStyle: 'text-align: center; padding-bottom: 10px;',
            labelWidth: this.msgWidth
          }
        ]
      });
    }
    bottomTb = new Ext.toolbar.Toolbar({
      ui: 'footer',
      dock: 'bottom',
      layout: {
        pack: 'center'
      },
      padding: '0 8 10 16',
      items: this.preset
    });
    this.dockedItems = [bottomTb];
    return this.callParent(arguments);
  }
});
