// Generated by CoffeeScript 1.11.1
Ext.define('FM.view.windows.SearchFilesWindow', {
  extend: 'Ext.ux.window.Window',
  requires: ['FM.view.grids.FileSearchList', 'FM.view.forms.SearchFileForm'],
  alias: 'widget.search-files-window',
  cls: 'fm-search-files-window',
  title: t("Search Files"),
  animate: true,
  constrain: true,
  layout: 'anchor',
  bodyPadding: '0 0 20 0',
  width: 600,
  height: 450,
  resizable: {
    handles: 's n',
    minHeight: 300,
    maxHeight: 900
  },
  maximizable: true,
  modal: false,
  border: false,
  operationStatus: null,
  items: [
    {
      xtype: 'search-file-form'
    }, {
      xtype: 'file-search-list'
    }
  ],
  listeners: {
    show: {
      fn: function() {
        if (this.keymap != null) {
          this.keymap.destroy();
        }
        this.keymap = new Ext.util.KeyMap({
          target: this.getEl(),
          binding: [
            {
              key: Ext.event.Event.ENTER,
              ctrl: true,
              fn: FM.HotKeys.HotKeyDecorator((function(_this) {
                return function(key, e) {
                  var button, i, len, ref;
                  ref = _this.preset;
                  for (i = 0, len = ref.length; i < len; i++) {
                    button = ref[i];
                    if ((button.enter != null) && button.enter && (button.ctrl != null) && button.ctrl && !button.isDisabled()) {
                      if (button.handler != null) {
                        button.handler(button, e);
                      }
                    }
                  }
                  return e.stopEvent();
                };
              })(this))
            }
          ]
        });
        return Ext.ComponentQuery.query('textfield[name=search-file-path]', this)[0].setValue(this.session.path);
      }
    },
    resize: {
      fn: function() {
        var grid, h;
        FM.Logger.debug("SearchFilesWindow resize()", arguments);
        grid = Ext.ComponentQuery.query('file-search-list', this)[0];
        h = this.getHeight();
        return grid.setHeight(h - 335);
      }
    }
  },
  initComponent: function() {
    FM.Logger.debug('SearchFilesWindow initComponent()', this, arguments);
    this.search_btn = Ext.create('Ext.button.Button', {
      handler: (function(_this) {
        return function(button, e) {
          var file_size, filename, path, size_direction, type_dir, type_file;
          FM.Logger.debug("Search files Search handler called()", arguments, _this);
          if (_this.search != null) {
            filename = Ext.ComponentQuery.query('textfield[name=search-file-name]', _this)[0].getValue();
            path = Ext.ComponentQuery.query('textfield[name=search-file-path]', _this)[0].getValue();
            type_file = Ext.ComponentQuery.query('checkbox[name=search-type-file]', _this)[0].getValue();
            type_dir = Ext.ComponentQuery.query('checkbox[name=search-type-dir]', _this)[0].getValue();
            file_size = parseInt(Ext.ComponentQuery.query('textfield[name=search-file-size]', _this)[0].getValue());
            file_size = isNaN(file_size) ? 0 : file_size * 1024 * 1024;
            size_direction = Ext.ComponentQuery.query('combobox[name=search-file-size-direction]', _this)[0].getValue();
            return _this.search(button, _this, e, {
              filename: filename,
              path: path,
              type_file: type_file,
              type_dir: type_dir,
              file_size: file_size,
              size_direction: size_direction
            });
          }
        };
      })(this),
      scope: this,
      text: t("Search"),
      ctrl: true,
      enter: true
    });
    this.cancel_btn = Ext.create('Ext.button.Button', {
      handler: (function(_this) {
        return function(button, e) {
          FM.Logger.debug("Search files Cancel handler called()", arguments, _this);
          _this.cancelled = true;
          if (_this.cancel != null) {
            return _this.cancel(button, _this, e, _this.getOperationStatus());
          } else {
            return _this.close();
          }
        };
      })(this),
      scope: this,
      text: t("Cancel"),
      disabled: false,
      hidden: true
    });
    this.close_btn = Ext.create('Ext.button.Button', {
      handler: (function(_this) {
        return function() {
          FM.Logger.debug("Search files Close handler called()", arguments, _this);
          return _this.close();
        };
      })(this),
      scope: this,
      text: t("Close")
    });
    this.buttons = [this.search_btn, this.cancel_btn, this.close_btn];
    this.preset = [this.search_btn, this.close_btn, this.cancel_btn];
    FM.Logger.debug('SearchFilesWindow init done', this, this.buttons, this.preset);
    return this.callParent(arguments);
  },
  setSession: function(session) {
    return this.session = session;
  },
  getSession: function() {
    return this.session;
  },
  hasSession: function() {
    if (this.session != null) {
      return true;
    } else {
      return false;
    }
  },
  setOperationStatus: function(status) {
    return this.operationStatus = status;
  },
  hasOperationStatus: function() {
    if (this.operationStatus != null) {
      return true;
    } else {
      return false;
    }
  },
  getOperationStatus: function() {
    return this.operationStatus;
  },
  updateSearchFilterState: function(state) {
    var searchFilter;
    searchFilter = Ext.ComponentQuery.query('searchfield[name=search-file-filter]', this)[0];
    return searchFilter.setDisabled(state);
  }
});
